#! /usr/bin/perl
# Procedure: contacts
# Last update: 25/05/2009
#############################################################################
# IGSuite 4.0.0 - Provides an Office Suite by  simple web interface         #
# Copyright (C) 2002 Dante Ortolani  [LucaS]                                #
#                                                                           #
# This program is free software; you can redistribute it and/or             #
# modify it under the terms of the GNU General Public License               #
# as published by the Free Software Foundation; either version 2            #
# of the License, or (at your option) any later version.                    #
#                                                                           #
# This program is distributed in the hope that it will be useful,           #
# but WITHOUT ANY WARRANTY; without even the implied warranty of            #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
# GNU General Public License for more details.                              #
#                                                                           #
# You should have received a copy of the GNU General Public License         #
# along with this program; if not, write to the Free Software Foundation,   #
# Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.           #
#############################################################################

use strict;
use IG;
IG::MkEnv(__PACKAGE__);


IG::DTable (	protoagg	=> sub { CheckPrivilege( _new_or_edit() ) },
		proto		=> sub { CheckPrivilege( _new_or_edit() ) },
		protosub	=> sub { CheckPrivilege( _new_or_edit() ) },
		clone		=> sub { CheckPrivilege( _new_or_edit() ) },
		show_groups	=> sub { CheckPrivilege('contacts_group_view') },
		protogroup	=> sub { CheckPrivilege('contacts_group_new') },
		participant	=> sub { CheckPrivilege('contacts_group_view') },
		protopart	=> sub { CheckPrivilege('contacts_group_edit') },
		protopartagg	=> sub { CheckPrivilege('contacts_group_edit') },
		delpart		=> sub { CheckPrivilege('contacts_group_edit') },
		delexec		=> sub { CheckPrivilege('contacts_edit') },
		import_contacts	=> sub { CheckPrivilege('contacts_import') },
		import_contactsagg => sub { CheckPrivilege('contacts_import') },
		import_fromtext => sub { CheckPrivilege('contacts_import') },
		findshow	=> sub { CheckPrivilege('contacts_view') },
		findexec	=> sub { CheckPrivilege('contacts_view') },
		findstaff	=> sub { CheckPrivilege('contacts_view') },
		listreport	=> sub { CheckPrivilege('contacts_report') },
		mkreport	=> sub { CheckPrivilege('contacts_report') },
		usereport	=> sub { CheckPrivilege('contacts_report') },
		showrecord	=> sub { CheckPrivilege('contacts_view') },
		showgroup	=> sub { CheckPrivilege('contacts_view') },
		configure	=> sub { CheckPrivilege('contacts_edit') },
		configureagg	=> sub { CheckPrivilege('contacts_edit') },
		contactevents	=> sub { CheckPrivilege('contacts_report') },
		contactfinder	=> sub { CheckPrivilege() },
		storecontact	=> sub { CheckPrivilege() },
		extcontactfinder=> sub { CheckPrivilege() },
		changemaster	=> sub { CheckPrivilege('contacts_edit') },
		changemasteragg	=> sub { CheckPrivilege('contacts_edit') },
		default_action 	=> sub { CheckPrivilege('contacts_view') },
	   );

###########################################################################
###########################################################################
sub import_contacts
 {
  my $source_file_path = IG::UserDir() . $IG::S . 'contacts_to_import.csv';

  HtmlHead( title    => $lang{import_contacts} );
  TaskHead( title    => $lang{import_contacts},
            icon     => 1,
            width    => 410,
            padding  => 15 );

  if ( $on{file2import} )
   {
    ## Upload file to import
    push @IG::errmsg, 
         IG::FileUpload( param_name  => 'file2import',
                         target_dir  => IG::UserDir(),
                         target_file => 'contacts_to_import.csv',
                         overwrite   => 'true' );

   }
  elsif ( $on{action} ne 'import_contactsagg' )
   {
    ## delete previous files
    IG::FileUnlink( $source_file_path )
      or die("Can't delete '$source_file_path'.\n");
   }
  
  if ( -e $source_file_path )
   {
    ## set or discover separators
    my $t_separator;
    my $f_separator = (  undef,
                         ',',
                         ';',
                         ':',
                         ' ',
                         "\t",
                         undef  )[$on{fieldseparator}];

    if ( !$f_separator )
     {
      require IG::TextCSVSeparator;
      $f_separator
         = Text::CSV::Separator::get_separator( path  => $source_file_path,
                                                lucky => 1 );

      die("I can't find automatically a columns separator. ".
          "Is this a valid CSV file?\n") if !$f_separator;
     }

    ## now try to parse the file
    require IG::TextCSV_PP;                                                                            

    FormHead( labelstyle => 'width:auto; font-size:10px',
              cgiaction  => 'import_contactsagg' );

    Input(    type       => 'hiddens',
              data       => { f_separator => $f_separator,
                              t_separator => $t_separator,
                              samplerows  => $on{samplerows} } );

    my $csv = Text::CSV_PP->new
               ( { quote_char          => '"',
                   escape_char         => '"',
                   sep_char            => $f_separator,
                   eol                 => $\,
                   always_quote        => 0,
                   binary              => 1,
                   keep_meta_info      => 0,
                   allow_loose_quotes  => 0,
                   allow_loose_escapes => 0,
                   allow_whitespace    => 0,
                   blank_is_undef      => 0,
                   verbatim            => 0,
                 } 
               ) or die Text::CSV_PP->error_diag();

    ## prepare fields name
    for (qw(address city province zip_code country))
     {
      $lang{"operations_headquarters_$_"} = "$lang{operations_headquarters} $lang{$_}";
      $lang{"operating_center_$_"} = "$lang{operating_center} $lang{$_}";
      $lang{"legal_situs_$_"} = "$lang{legal_situs} $lang{$_}";
     }

    my %db_fields;
    for my $fld ( @{_get_field_to_import()} )
     {
      my %_field = %$fld;
      $db_fields{$_field{name}} =    $lang{$_field{label}}
                                  || ucfirst $_field{label};
     }

    Input( show      => $lang{contact_type},
           type      => 'select',
           style     => 'font-size:10px',
           zerovalue => 'true',
           data      => { 1  => $lang{type1},
                          2  => $lang{type2},
                          3  => $lang{type3},
                          4  => $lang{type4},
                          5  => $lang{type5},
                          6  => $lang{type6},
                          7  => $lang{type7},
                          8  => $lang{type8},
                          9  => $lang{type9},
                          10 => $lang{type10}, },
           name      => 'contacttype');

    Input( show      => $lang{share_mode},
           type      => 'select',
           float     => 'left',
           name      => 'sharemode',
           data      => [(['0',$lang{share0}],
                          ['1',$lang{share1}],
                          ['2',$lang{share2}])] );

    Input( type      => 'checkbox',
           name      => 'import_first_row',
           style     => 'font-size:10px',
           float     => 'left',
           show      => 'Import first row' );

    PrOut "<br><div style=\"margin-top:15px; clear:both;padding:3px;".
          " width:700px; height:350px; border:1px solid black;".
          " overflow:auto\">".
          "<table border=1 cellspacing=0 cellpadding=0 style=\"font-size:10px\">";

    open ( my $fh, "<", $source_file_path )
      or die("Can't open '$source_file_path': $!\n");

    my ($cnt_record, $cnt_errors, $cnt_cols, @import_errors);
    while ( (my $colref = $csv->getline($fh)) || !$csv->eof() )
     {
      $cnt_record++;

      if ( $colref )
       {
        if ( $cnt_record < $on{samplerows} )
         {
          my @field = @$colref;

          ## insert select box to identify column values
          if ( $cnt_record == 1 )
           {
            PrOut '<tr><td>&nbsp;</td>';
            $cnt_cols ||= $#field;
            foreach my $col ( 0 .. $cnt_cols )
             {
              PrOut '<td>'.
                    Input( type      => 'select',
                           name      => "col$col",
                           data      => \%db_fields,
                           zerovalue => 'true',
                           style     => 'font-size:10px').
                    '</td>';
             }
            PrOut '</tr>';
           }

          PrOut "<tr><td>$cnt_record</td>";
          foreach my $col ( 0 .. $cnt_cols )
           {
            PrOut '<td>'. ( $field[$col] || '&nbsp;' ) . '</td>';
           }
          PrOut '</tr>';
         }
       }
      else
       {
        $cnt_errors++;
        my $err = $csv->error_input;
        my ($cde, $str, $pos) = $csv->error_diag ();
        push @import_errors, "parse failed '$cde:$str' ".
                             "at position '$pos' on argument: $err"
             if $cnt_errors < 20;
       }
     }

    PrOut "</table></div>";

    Input( type       => 'hidden',
           name       => 'cnt_cols',
           value      => $cnt_cols );

    Input( type       => 'select',
           name       => 'field_to_compare',
           data       => \%db_fields,
           style      => 'font-size:10px; margin-top:20px',
           labelstyle => 'font-size:10px; margin-top:20px',
           show       => 'Campo di confronto',
           zerovalue  => 'true',
           float      => 'left' );

    Input( type       => 'select',
           name       => 'on_equal_field',
           data       => { overwrite => 'Sovrascrivi se uguale',
                           skip      => 'Non importare se uguale',
                         },
           style      => 'font-size:10px; margin-top:20px',
           labelstyle => 'font-size:10px; margin-top:20px',
           zerovalue  => 'true',
           float      => 'left' );


    close $fh or die( "Can't close file '$source_file_path': $!\n" );
    push @IG::errmsg, ($cnt_record-$cnt_errors) .
                      " records had been parsed correctly.\n";

    ## Check errors
    if ( $cnt_errors > 20 )
     {
      push @IG::errmsg, "To many errors occurs during CSV import. ".
                        "If you continue to import the file some record ".
                        "will be lost without alert you.";
     }
    else
     {
      push @IG::errmsg, @import_errors;
     }
   }
  else
   {
    ## Show the form to Upload file to import
    FormHead( enctype   => 'multipart/form-data',
              labelstyle=> 'width:150px',
              cgiaction => 'import_contacts' );

    HTitle( title       => "$lang{import_from_file} ($IG::lang_charset)",
            level       => 3,
            style       => 'padding:0; margin: 0 0 15px 0;');

    Input( type         => 'file',
           style        => 'width:200px',
           name         => 'file2import',
           show         => $lang{import_filename} );

    Input( type         => 'select',
           style        => 'width:200px',
           name         => 'fieldseparator',
           value        => 6,
           data         => { 6 => 'auto',
                             1 => ',',
                             2 => ';',
                             3 => ':',
                             4 => '{space}',
                             5 => '{tab}' },
           show         => $lang{field_separator} );

    Input( type         => 'select',
           style        => 'width:200px',
           name         => 'textseparator',
           value        => 3,
           data         => { 3 => 'auto',
                             1 => "'",
                             2 => '"' },
           show         => $lang{text_separator} );

    Input( type         => 'select',
           style        => 'width:200px; clear:both',
           name         => 'samplerows',
           value        => 5,
           data         => [ 10,20,30,50 ],
           show         => "Sample rows" );
   }

  Input( type         => 'submit',
         float        => 'right',
         style        => 'margin-top:20px',
         show         => $lang{import} );

  Input( type         => 'button',
         float        => 'right',
         style        => 'margin-top:20px',
         onclick      => "document.location='contacts';",
         show         => $lang{cancel} );

  FormFoot();

  ## Import from text (EXPERIMENTAL)
  if ( $IG::lang eq 'it' && ! -e $source_file_path )
   {
    Br(2);
    FormHead( labelstyle=> 'width:150px',
              name      => 'text2contact',
              cgiaction => 'import_fromtext' );

    HTitle( title       => $lang{import_from_text},
            level       => 3,
            style       => 'padding:0; margin: 0 0 15px 0;');

    Input( type         => 'textarea',
           style        => 'width:200px; height:120px; clear:both',
           labelstyle   => 'width:150px; height:120px',
           name         => 'text2parse',
           show         => "Testo da importare" );

    Input( type         => 'submit',
           float        => 'right',
           style        => 'margin-top:20px',
           show         => $lang{import} );

    Input( type         => 'button',
           float        => 'right',
           style        => 'margin-top:20px',
           onclick      => "document.location='contacts';",
           show         => $lang{cancel} );

    FormFoot();
   }

  TaskFoot();
  HtmlFoot();
  1;
 }

###########################################################################
###########################################################################
sub import_contactsagg
 {
  my ($cnt_record, $cnt_errors, $_ok_name_flag );

  ## we have at least import a contact name
  for my $cnt ( 0 .. $on{cnt_cols} )
   { $_ok_name_flag++ if $on{"col$cnt"} eq 'contactname'; }

  push @IG::errmsg, "You have at least import a contact name field"
    if ! $_ok_name_flag;  

  ## Checks errors
  import_contacts() && return if @IG::errmsg;

  ## Prepare fields length
  my %db_fields_len;
  for my $fld ( @{_get_field_to_import()} )
   {
    my %_field = %$fld;
    $db_fields_len{$_field{name}} =  $_field{type};
    $db_fields_len{$_field{name}} =~ s/varchar\((\d+)\)/$1/;
   }

  require IG::TextCSV_PP;                                                                            

  my $csv = Text::CSV_PP->new
               ( { quote_char          => '"',
                   escape_char         => '"',
                   sep_char            => $on{f_separator},
                   eol                 => $\,
                   always_quote        => 0,
                   binary              => 1,
                   keep_meta_info      => 0,
                   allow_loose_quotes  => 0,
                   allow_loose_escapes => 0,
                   allow_whitespace    => 0,
                   blank_is_undef      => 0,
                   verbatim            => 0,
                 } 
               ) or die Text::CSV_PP->error_diag();

  my $source_file_path = IG::UserDir() . $IG::S .
                         'contacts_to_import.csv';

  open ( my $fh, "<", $source_file_path )
    or die("Can't open '$source_file_path': $!\n");

  my $fake_row = <$fh> if ! $on{import_first_row};

  while ( (my $colref = $csv->getline($fh)) || !$csv->eof() )
   {
    $cnt_record++;
    if ( $colref )
     {
      my %dbcols;
      my @field = @$colref;

      foreach my $col (0 .. $#field)
       {
        next if ! $on{"col$col"};
        $dbcols{$on{"col$col"}} = $db_fields_len{$on{"col$col"}} eq 'text'
                                ? $field[$col]
                                : substr( $field[$col],
                                          0,
                                          $db_fields_len{$on{"col$col"}} );
       }

      if ( $on{on_equal_field} eq 'skip' )
       {
        my $field_to_compare = lc( $dbcols{$on{field_to_compare}} );
        DbQuery( "select name from contact ".
                 "where lower($on{field_to_compare}) = '$field_to_compare' ".
                 "limit 1" );
        next if FetchRow();
       }

      $dbcols{contacttype} = $on{contacttype};
      $dbcols{nospace}     = $dbcols{contactname};
      $dbcols{nospace}     =~ s/\.|\-|\'| //g;
      $dbcols{owner}       = $auth_user;
      $dbcols{contactid}   = _mk_new_id();
      $dbcols{lastupdate}  = $tv{today};
      $dbcols{sharemode}   = $on{sharemode};
      $dbcols{master}      = '0';

      DbWrite( table            => 'contacts',
               action           => 'insert',
               overwrite_clause => $on{on_equal_field} eq 'overwrite'
                                ?  "$on{field_to_compare} = '".
                                   DbQuote($dbcols{$on{field_to_compare}})."'"
                                :  '',
               values           => \%dbcols );

      LogD("imported contact $on{contactname}",
           "insert",
           "contacts",
           $dbcols{contactid});
     }
    else
     {
      $cnt_errors++;
     }
   }
   
  close $fh or die( "Can't close file '$source_file_path': $!\n" );

  push @IG::errmsg, ($cnt_record - $cnt_errors) .
                    " records had been imported correctly.\n";   

  IG::FileUnlink( $source_file_path )
    or die("Can't delete '$source_file_path'.\n");

  import_contacts();
 }

###########################################################################
###########################################################################
sub _get_field_to_import
 {
  my @fields
   = (	{ name=>'contactname',
	  type=>'varchar(70)',
	  label=>'contact_name'},

	{ name=>'address1',
	  label=>'operations_headquarters_address',
	  type=>'varchar(60)',},

	{ name=>'city1',
	  label=>'operations_headquarters_city',
	  type=>'varchar(40)',},

	{ name=>'zip1',
	  label=>'operations_headquarters_zip_code',
	  type=>'varchar(15)',},

	{ name=>'prov1',
	  label=>'operations_headquarters_province',
	  type=>'varchar(10)',},

	{ name=>'piva',
	  label=>'vat_number',
	  type=>'varchar(20)',},

	{ name=>'taxidnumber',
          label=>'vat_code',
	  type=>'varchar(20)',},

	{ name=>'tel1',
	  label=>'telephone_exchange',
	  type=>'varchar(20)',},

	{ name=>'fax',
	  label=>'fax_number',
	  type=>'varchar(20)',},

	{ name=>'note',
	  label=>'notes',
	  type=>'text',},

	{ name=>'email',
	  label=>'email',
	  type=>'varchar(100)',},

	{ name=>'url',
	  label=>'url',
	  type=>'varchar(100)',},

	{ name=>'address2',
	  label=>'operating_center_address',
	  type=>'varchar(50)',},

	{ name=>'city2',
	  label=>'operating_center_city',
	  type=>'varchar(35)',},

	{ name=>'zip2',
	  label=>'operating_center_zip_code',
	  type=>'varchar(15)',},

	{ name=>'prov2',
	  label=>'operating_center_province',
	  type=>'varchar(10)',},

	{ name=>'address3',
	  label=>'legal_situs_address',
	  type=>'varchar(50)',},

	{ name=>'city3',
	  label=>'legal_situs_city',
	  type=>'varchar(35)',},

	{ name=>'zip3',
	  label=>'legal_situs_zip_code',
	  type=>'varchar(15)',},

	{ name=>'prov3',
	  label=>'legal_situs_province',
	  type=>'varchar(10)',},

	{ name=>'country1',
	  label=>'operations_headquarters_country',
	  type=>'varchar(2)',},

	{ name=>'country2',
	  label=>'operating_center_country',
	  type=>'varchar(2)',},

	{ name=>'country3',
	  label=>'legal_situs_country',
	  type=>'varchar(2)',}
      );

  return \@fields;
 }

###########################################################################
###########################################################################
sub import_fromtext
 {
  ## EXPERIMENTAL (ONLY ITALIAN)
  my %fld;
  my $first_row;
  my $text_str = _purify( $on{text2parse} );

  for my $text_row ( split /\n/, $text_str )
   {
    $first_row ||= _purify( $text_row );

    ## piva
    if ( !$fld{piva} &&
         $text_row =~ /(p\.i\.|p\.iva|p\. iva|partita iva)[\s\:]+(\d{11})/i
       )
     {
      $fld{piva} = _purify( $2 );
     }    

    ## internet site
    if ( !$fld{site} &&
         $text_row =~ /(http\:\/\/|web\:*\s*)([^\:\s]+)/i
       )
     {
      $fld{url} = _purify( lc($2) );
     }
 
    ## tel
    if ( !$fld{tel1} &&
         $text_row =~ /(telefono|tel[\.\/\s]*fax|tel|phone|centralino)
                       [\s\:\.\,]*
                       ([\+\d\s\-\.\/\(\)]+)/xi
       )
     {
      $fld{tel1} = _purify($2);
      $fld{tel1} =~ s/[\s\-\/\(\)]//g;
     }

    ## Fax
    if ( !$fld{fax} &&
         $text_row =~ /(fax|telefax)
                       [\s\:\.\,]*
                       ([\+\d\s\-\.\/\(\)]+)/xi
       )
     {
      $fld{fax} = _purify($2);
      $fld{fax} =~ s/[\s\-\/\(\)]//g;
     }

    ## company name
    if ( !$fld{contactname} &&
         $text_row =~ /([a-z0-9\'\.\-\s\&]+)
                       [\(\-\,\s]*
                       (\& c\.|srl|spa|snc|
                        sas|scarl|arl|s\.r\.l|
                        s\.p\.a|s\.n\.c|s\.a\.s|
                        s\.c\.a\.r\.l|a\sr\.l\.|
                        a\.r\.l)/xi
       )
     {
      $fld{socname}     = $1;
      $fld{socform}     = $2;
      $fld{socform}     =~ s/\.//g;
      $fld{socform}     =~ s/(.)/$1\./g;
      $fld{contactname} = _purify( $fld{socname} .' '. $fld{socform} ) .'.';
     }

    ## company address 1 ## 12, Via Verdi
    if ( !$fld{address1} &&
         $text_row =~ /(
                        (?:km\.*\s|)
                        (?:snc|\d[0-9a-z\-\/\.\,]*)
                       )
                       \,\s
                       (strada|str\.|via|piazza|viale|frazione|fraz\.|
                        v\.le|corso|c\.so|località|s\.s\.|s\.p\.|
                        localita\'|v\.|vl\.|largo|l\.go|lg\.)
                       (\s[a-z0-9\'\.\s]+)/xi
       )
     {
      $fld{address1} = _purify("$2$3, $1");
      $fld{address1} =~ s/$fld{zip}$// if $fld{zip};
     }

    ## company address 2 ## Via Verdi, 12
    if ( !$fld{address1} &&
         $text_row =~ /(strada|str\.|via|piazza|viale|frazione|fraz\.|
                        v\.le|corso|c\.so|località|s\.s\.|s\.p\.|
                        localita\'|v\.|vl\.|largo|l\.go|lg\.)
                       \s
                       ([a-z0-9\'\.\-\s]+)
                       \s*
                       (
                        (\,|\,*\s*km\.*)
                        \s*
                        (?:snc|\d[0-9a-z\-\/\.\,]*)
                       )
                      /xi        
       )
     {
      $fld{address1} = _purify("$1 $2$3");
      $fld{address1} =~ s/$fld{zip}$// if $fld{zip};

     }

    ## company address 3 ## Via Verdi 12
    if ( !$fld{address1} &&
         $text_row =~ /(strada|str\.|via|piazza|viale|frazione|fraz\.|
                        v\.le|corso|c\.so|località|s\.s\.|s\.p\.|
                        localita\'|v\.|vl\.|largo|l\.go|lg\.)
                       \s
                       ([a-z\'\.\-\s]+)
                       \s
                       (snc|\d[0-9a-z\-\/\.]*)
                      /xi        
       )
     {
      $fld{address1} = _purify("$1 $2, $3");
     }

    ## city zip prov
    if ( !$fld{city1}
         && ( $text_row =~ /(\d{5})           ## 00100 Roma (RM)
                            [\s\,\-]+
                            ([^\(]+)
                            \s
                            \(([^\)]{2})\)
                           /xi
              ||
              $text_row =~ /[^\d\w]*(\d{5})   ## 00100 Roma
                            [\s\-]+
                            ([^\-]+)
                           /xi
            )
       )
     {
      $fld{zip1}  = $1;
      $fld{city1} = _purify($2);
      $fld{prov1} = _purify($3); 
     }

    if ( !$fld{email} && $text_row =~ /(e\-*mail\:*|)([^\s\@]+\@[^\s\@]+)/i )
     {
      $fld{email} = $2;
     }
   }

  ## adjust some values
  $fld{contactname} ||= $first_row;
  $fld{address1}     =~ s/\s\,/\,/g;

  ## call contact proto
  my $link = "contacts?action=proto&amp;note=" . MkUrl($text_str);
  for my $var ( qw( contactname address1 city1
                    zip1 prov1 tel1 fax email url piva ) )
   {
    $link .= "&amp;$var=" . IG::MkUrl($fld{$var}) if $fld{$var};
   }

  IG::Redirect( $link );
 }
 
sub _purify
 {
  my $str = shift;
  1 while $str =~ s/  / /g;
  $str =~ s/^[\s\-\,\.]*|[\s\-\,\.]*$//g;

  ## adjusts capitalization
  require IG::TextCapitalize;
  $str = Text::Capitalize::capitalize( $str, PRESERVE_ALLCAPS => 1 );

  return $str;
 }

###########################################################################
###########################################################################
sub _new_or_edit
 {
  return $on{contactid} ? 'contacts_edit' : 'contacts_new' ;
 }

###########################################################################
###########################################################################
sub contactfinder
 {
  require IG::Utils;
  my $query;
  HtmlHead( title     => $lang{contacts} );
  TaskHead( width     => '100%');
  FormHead( cgiaction => 'contactfinder',
            float     => 'left',
	    name      => 'contactselector');

  Input(    type      => 'hiddens',
	    data      => { extraselection   => '',
                           groupselection   => '',
                           falsecontactname => '',
		           contactformname  => '',
		           contactformid    => '' });

  TaskMsg( Input( type  => 'select',
		  name  => 'fieldtofind',
		  style => 'width:150px',
		  data  => [(['name',    $lang{contact_name}],
		             ['tel',     "$lang{phone_number}/Fax"],
		             ['address', "$lang{address}/$lang{city}"],
		             ['email',   $lang{email}],
		             ['note',    $lang{notes}])] ).

           Input( type  => 'select',
                  style => 'width:150px',
                  name  => 'method',
                  value => 'contain',
                  data  => [(['start',   $lang{with_begin}],
                             ['contain', $lang{contain}])] ).

           Input( type  => 'text',
                  name  => 'keytofind',
                  style => 'width:250px; margin-right: -5px;',
                  focus => 'true',
                  onfocus=>"if ( this.value=='' )".
                           " { this.value = window.opener.document.$on{contactformname}.contactname.value }").

           Input( type  => 'image',
                  name  => 'find_contact',
                  src   => "$IG::img_url/${IG::tema}search.gif",
                  alt   => $lang{find})

	   ,4 );


  ## Make a query (the same alghoritm in findexec() )
  QuoteParams();
  if ( length($on{keytofind}) > 1 )
   {
    if ($in{fieldtofind} eq 'name')
     {
      $in{keytofind} = lc $in{keytofind};
      my $nospace_key = $in{keytofind};
         $nospace_key =~ s/(\.|\-|\\\'| )//g;

      if ($in{method} eq 'start')
       {
        my $full_len  = length( $on{keytofind} );
        my $short_len = length( $nospace_key );
        $query .= "(substr(lower(contacts.nospace),1,$short_len)='$nospace_key' or".
                  " substr(lower(contacts.contactname),1,$full_len)='$in{keytofind}') ";
       }
      else
       {
        $query .= "(contacts.nospace ~* '$nospace_key' or".
                  " contacts.contactname ~* '$in{keytofind}') ";
       }
      $query .= " and pricelistflag='s'" if $in{linktoproducts}; 
     }
    elsif ($in{fieldtofind} eq 'tel')
     {
      $query .= "(contacts.fax ~* '$in{keytofind}' or".
	        " contacts.tel1 ~* '$in{keytofind}' or".
		" contacts.tel2 ~* '$in{keytofind}' or".
		" contacts.tel3 ~* '$in{keytofind}' or".
		" contacts.tel4 ~* '$in{keytofind}' or".
		" contacts.tel5 ~* '$in{keytofind}') ";
     }
    elsif ($in{fieldtofind} eq 'note')
     {
      $query .= "contacts.note ~* '$in{keytofind}' ";
     }
    elsif ($in{fieldtofind} eq 'email')
     {
      $query .= "contacts.email ~* '$in{keytofind}' ";
     }
    elsif ($in{fieldtofind} eq 'address')
     {
      $query .= "(contacts.address1 ~* '$in{keytofind}' or".
                " contacts.address3 ~* '$in{keytofind}' or".
                " contacts.address2 ~* '$in{keytofind}' or".
                " contacts.city1 ~* '$in{keytofind}' or".
                " contacts.city3 ~* '$in{keytofind}' or".
                " contacts.city2 ~* '$in{keytofind}') ";
     }
   }
  else
   {
    push (@IG::errmsg, $lang{Err_find}) if $on{subact} ne 'justview';
   }

  ## Build first pan PAN0
  my $pan0 = TaskListMenu(  [$lang{code}],
			    [$lang{contact_name}],
			    [$lang{operations_headquarters}],
			    [$lang{operating_center}] );

  if ( $query )
   {
    $query = ( ! $on{groupselection}
               ? "contacts.category<>'group' and "
               : '').
             "(contacts.contacttype<>8 or".
             " contacts.owner='$auth_user' or".
	     " contacts.contacttype is null) and ". 
	     "(masterCnt.contactid is null or".
	     " masterCnt.contacttype<>8 or".
	     " masterCnt.owner='$auth_user' or".
	     " masterCnt.contacttype is null) and ($query)";
       
    my $conn = DbQuery("select contacts.contactname, contacts.contactid,".
	               " contacts.city1, contacts.address1, contacts.city2,".
		       " contacts.address2, contacts.contacttype, contacts.fax, ".
	               " contacts.master, masterCnt.contactname,".
	               " contacts.category ".
		       "FROM contacts ".
                       "LEFT JOIN contacts masterCnt ".
	               "ON masterCnt.contactid=contacts.master ".
	               "WHERE $query ".
		       "ORDER by contacts.contactname, contacts.contactid");

    while ( my @row = FetchRow($conn) )
     {
      my $color = ($row[6]==1 || $row[6]==6) ? '#b5b5b5' : '#000000';

      if ( $on{extraselection} && $row[10] ne 'group' )
       {
        ## we want a subcontact id too
        $row[1] = "<a href=\"contacts?".
		  "action=extcontactfinder&amp;".
		  "contactformid=$on{contactformid}&amp;".
		  "contactformname=$on{contactformname}&amp;".
		  "contactid=$row[1]\">". $row[1] . "</a>";
       }
      else
       {
        $row[1] = "<a href=\"contacts?".
                            "action=storecontact&amp;".
                            "contactcategory=$row[10]&amp;".
                            "contactformid=$on{contactformid}&amp;".
                            "contactid=$row[1]\"".
	  	  " onclick=\"window.opener.document.$on{contactformname}.contactname.value = '".
	  	  IG::JsQuote($row[0])."';\">".
		  "$row[1]</a>";
       }

      if ( $row[8] ) 
       {
        $pan0 .= TaskListItem
                (
           	 [$row[1]],
	         [$row[0],   "", "style=\"color: $color\""],
		 ["$row[9]", "", "style=\"color: $color\" colspan=\"2\""],
		);
	 
       }
      else 
       {
        $pan0 .= TaskListItem
                (
           	 [$row[1]],
	         [$row[0], "","style=\"color: $color; font-weight: bold\""],
	         ["$row[3]&nbsp;$row[2]", "", "style=\"color: $color\""],
	         ["$row[5]&nbsp;$row[4]", "", "style=\"color: $color\""],
		);
       }
     }
   }

  $pan0 .= TaskListFoot(10);


  ## Build second pan PAN1 ## recent contacts
  my $pan1 = TaskListMenu(  [$lang{code}],
			    [$lang{contact_name}],
			    [$lang{operations_headquarters}],
			    [$lang{operating_center}] );

  ## Insert contact share mode in query
  $query = "master='0' and ((contacttype=8 and owner='$auth_user')".
           " or contacttype<>8 or contacttype is null)"; 

  my $conn = DbQuery("select contactname, contactid, city1, address1, city2,".
		     " address2, contacttype, fax ".
		     "FROM contacts where $query ".
                     ( $IG::db_driver eq 'sqlite'
                       ? "order by contacts.contactid desc "
                       : "order by lpad(contacts.contactid,10,'0') desc " ).
                     "LIMIT $IG::page_results" );

  while (my @row = FetchRow($conn))
   {
    my $color = ($row[6]==1 || $row[6]==6) ? '#b5b5b5' : '#000000';

    if ( !$on{extraselection} )
     {
      $row[1] = "<a href=\"contacts?".
                            "action=storecontact&amp;".
                            "contactformid=$on{contactformid}&amp;".
                            "contactid=$row[1]\"".
                " onclick=\"window.opener.document.$on{contactformname}.contactname.value = '".
	        IG::JsQuote($row[0])."';\">".
                "$row[1]</a>";
     }
    else
     {
      $row[1] = "<a href=\"contacts?".
                          "action=extcontactfinder&amp;".
		          "contactformid=$on{contactformid}&amp;".
		          "contactformname=$on{contactformname}&amp;".
		          "contactid=$row[1]\">".
		$row[1] . "</a>";
     }

    $pan1 .= TaskListItem
                (
           	 [$row[1]],
	         [$row[0],			"","style=\"color: $color\""],
	         ["$row[3]&nbsp;$row[2]",	"","style=\"color: $color\""],
	         ["$row[5]&nbsp;$row[4]",	"","style=\"color: $color\""],
		);
   }

  $pan1 .= TaskListFoot(10);


  ## Build thirdh pan PAN2 ## Last opened
  my $pan2 = TaskListMenu(  [$lang{code}],
			    [$lang{contact_name}],
			    [$lang{operations_headquarters}],
			    [$lang{operating_center}] );

  my $conn1 = DbQuery("select contacts.contactname, contacts.contactid,".
                     " contacts.city1, contacts.address1, contacts.city2,".
                     " contacts.address2, contacts.contacttype, contacts.fax ".
                     "from last_elements_log ".
                     "left join contacts ".
                     "on contacts.contactid = last_elements_log.id ".
                     "where contacts.master='0' and last_elements_log.owner='$auth_user'".
                     " and last_elements_log.type='contacts'".
                     " and last_elements_log.issuedate='$tv{today}' ".
                     "order by last_elements_log.issuetime desc");

  my %dejavue;  
  while (my @row = FetchRow($conn1))
   {
    next if $dejavue{$row[1]}++;
    my $color = ($row[6]==1 || $row[6]==6) ? '#b5b5b5' : '#000000';

    if (!$on{extraselection})
     {
      $row[1] = "<a href=\"contacts?".
                            "action=storecontact&amp;".
                            "contactformid=$on{contactformid}&amp;".
                            "contactid=$row[1]\"".
                " onclick=\"window.opener.document.$on{contactformname}.contactname.value = '".
	        IG::JsQuote($row[0])."';\">".
                "$row[1]</a>";
     }
    else
     {
      $row[1] = "<a href=\"contacts?".
                          "action=extcontactfinder&amp;".
		          "contactformid=$on{contactformid}&amp;".
		          "contactformname=$on{contactformname}&amp;".
		          "contactid=$row[1]\">".
		$row[1] . "</a>";
     }

    $pan2 .= TaskListItem
                (
           	 [$row[1]],
	         [$row[0],			"","style=\"color: $color\""],
	         ["$row[3]&nbsp;$row[2]",	"","style=\"color: $color\""],
	         ["$row[5]&nbsp;$row[4]",	"","style=\"color: $color\""],
		);
   }

  $pan2 .= TaskListFoot(10);
  

  ## Build TabPane Widget
  IG::TabPane( data       => [( [$lang{contacts},      $pan0],
                                [$lang{allminerecent}, $pan1],
                                [$lang{allopenedtoday},$pan2]
                              )],
               label_type => 1,
               margin_top => 2,
               width      => 650,
               height     => 280 );


  Input( type    => 'submit',
	 onclick => "window.opener.document.$on{contactformname}.contactname.value = contactselector.keytofind.value; self.close();",
	 label   => $lang{insert_as_is} ) if $on{falsecontactname};

  Input( type    => 'reset',
         onclick => 'self.close()',
         float   => 'left',
         show    => $lang{close} );

  Input( type    => 'reset',
         onclick => "window.location = 'contacts?action=proto&amp;backtoformid=$on{contactselector}'",
         float   => 'left',
         show    => $lang{new_contact_card});

  FormFoot();
  TaskFoot();
  HtmlFoot();
 }

############################################################################
############################################################################
sub extcontactfinder
 {
  my @subcontact_values;

  DbQuery("select contactid, contactname, city1, address1, city2,".
	  " address2, city3, address3, fax, email ".
	  " from contacts where contactid='".DbQuote($on{contactid})."'");
  my @contact_values = FetchRow();

  HtmlHead( title=>"$contact_values[0] $contact_values[1]" );
  TaskHead( title=>"$contact_values[0] $contact_values[1]",
	     width=>'100%');

  FormHead(	cgiaction=>'storecontact',
		onsubmit=>"window.opener.document.$on{contactformname}.contactname.value = '".
		          IG::JsQuote($contact_values[1])."';",
		labelstyle=>'width: auto');

  Input ( type=>'hiddens',
	  data=>{ contactformid=>'',
		  contactformname=>'',
		  contactid=>'' });

  TaskMsg( HLayer( valign=>'top',
		   layers_style=> 'white-space: nowrap;',
		   intra_space=>1,
	
		   left_layers => [Input ( name  => 'contactaddress',
					   type  => 'radio',
					   value => 1 ),
				   "<b>$lang{operations_headquarters}</b><br>
				    $contact_values[3]<br>
				    $contact_values[2]"],

		   layers => 	  [Input ( name  => 'contactaddress',
					   type  => 'radio',
					   value => 2 ),
				   "<b>$lang{operating_center}</b><br>
				    $contact_values[5]<br>
				    $contact_values[4]"],

		   right_layers =>[Input ( name  => 'contactaddress',
					   type  => 'radio',
					   value => 3 ),
				   "<b>$lang{legal_situs}</b><br>
				    $contact_values[7]<br>
				    $contact_values[6]"],
		),4);
		
  PrOut "<div id=\"list_table\" style=\"margin-bottom:15px; height:300px; overflow:auto\">";

  TaskListMenu (
		['Id'],
		[$lang{referring}],
		[$lang{fax_number}],
		[$lang{email}]
		);

    TaskListItem (
	[ Input (type=>'radio',
		 label=>$contact_values[0],
		 name=>'subcontactid',
		 value=>$contact_values[0]),'','nowrap' ],
	[$contact_values[1]],
	[$contact_values[8]],
	[$contact_values[9]]
		);

  DbQuery("select contactid, contactname, fax, email from contacts ".
	  "where master = '".DbQuote($on{contactid})."' order by contactname");

  while (@subcontact_values = FetchRow())
   {
    TaskListItem (
	[ Input (type	=> 'radio',
		 name	=> 'subcontactid',
		 label	=> $subcontact_values[0],
		 value	=> $subcontact_values[0])],
	[$subcontact_values[1]],
	[$subcontact_values[2]],
	[$subcontact_values[3]]
		);
   }
  TaskListFoot(10);
  PrOut "</div>";

  Input(   type       => 'submit',
	   label      => $lang{select});
  FormFoot();

  FormHead( cgiaction => 'contactfinder');
  Input(    type      => 'hidden',
            name      => 'subact',
            value     => 'justview');
  Input(    type      => 'submit',
	    float     => 'left',
            label     => $lang{go_back} );
  Input(    type      => 'reset',
            float     => 'left',
            onclick   => 'self.close()',
            show      => $lang{close} );
  FormFoot();

  TaskFoot();
  HtmlFoot();
 }

############################################################################
############################################################################
sub storecontact
 {
  my $onload;
  IG::CGISession( action      => 'update',
                  param_value => $on{contactid},
                  param_name  => 'contactid',
                  formid      => $on{contactformid} );

  IG::CGISession( action      => 'update',
                  param_value => $on{contactaddress},
                  param_name  => 'contactaddress',
                  formid      => $on{contactformid} );

  IG::CGISession( action      => 'update',
                  param_value => $on{contactcategory},
                  param_name  => 'contactcategory',
                  formid      => $on{contactformid} ) if $on{contactcategory};

  if ( $on{subcontactid} )
   {
    IG::CGISession( action      => 'update',
                    param_value => $on{subcontactid},
                    param_name  => 'subcontactid',
                    formid      => $on{contactformid} );

    if ( $on{contactformname} eq 'sendfax' )
     {
      ## contactfinder had been called by sendfax
      DbQuery("select fax, email, contactname, master from contacts ".
	      "where contactid='".DbQuote($on{subcontactid})."'");
      my ($fax, $email, $subcontactname, $master) = FetchRow();
      
      if ($master && (!$fax || !$email) )
       {
        ## try to complete info by master contact
        DbQuery("select fax, email from contacts where contactid='$master'");
        my @row = FetchRow();
        $fax   ||= $row[0];
        $email ||= $row[1];
       }
       
      my $sendfax_obj = "window.opener.document.sendfax";
      $onload  = "$sendfax_obj.differentfaxnumber.value='".
                  IG::JsQuote($fax)."'; ".
                 "$sendfax_obj.emailaddress.value='".
                  IG::JsQuote($email)."'; ";

      $onload .= "$sendfax_obj.subcontactnameca.value = '".
                  IG::JsQuote($subcontactname)."'; ".
                 "$sendfax_obj.cover.checked = true; "
              if $on{subcontactid} ne $on{contactid};
                
      $onload .= "$sendfax_obj.sendbyemail.checked = true; " if $email;
      $onload .= "$sendfax_obj.sendbyfax.checked = true; " if $fax;
     }
   }

  $onload .= "self.close();";
  HtmlHead( onevent => "onload=\"$onload\"" );
  HtmlFoot();
 }

############################################################################
############################################################################
sub _short_cuts
 {
  return IG::QuickCreator().
         TaskHead( title => $lang{last_documents},
                   icon  => 2,
                   width => 180 ).
         IG::LastDocuments().
         TaskFoot();
 }

############################################################################
############################################################################
sub default_action
 {
  ## this is one of firt applications to be called by un-authenticated users
  IG::Redirect("igsuite?action=summary") && return if !CheckPrivilege();

  ## Mk Query to filter records
  $on{view}     ||= 'allvalid';
  my $query = "((contacts.contacttype=8 and contacts.owner='$auth_user')".
	      " or contacts.contacttype<>8 or contacts.contacttype is null) and "; 
  my $order = "contacts.contactname, contacts.contactid";

  if    ( $on{view} eq 'allvalid' )
   {
    $query .= "contacts.contacttype>1 and contacts.category<>'group'";
   }
  elsif ( $on{view} eq 'allpotential' )
   {
    $query .= "contacts.contacttype=7 and contacts.category<>'group'";
   }
  elsif ( $on{view} eq 'allminevalid' )
   {
    $query .= "contacts.owner='$auth_user'".
              " and contacts.contacttype>1".
              " and contacts.category<>'group'";
   }
  elsif ( $on{view} eq 'allmineold' )
   {
    $query .= "owner='$auth_user'".
              " and contacts.category<>'group'".
	      " and contacts.contacttype<>1 and ".
	       "((contacts.contactvalue>2".
	       " and contacts.lastupdate < '".
	       IG::SumDate( $tv{day}, $tv{month}, $tv{year}, -120)."') ".
	       "or (contacts.contactvalue<3".
	       " and contacts.lastupdate < '".
	       IG::SumDate( $tv{day}, $tv{month}, $tv{year}, -360)."'))";
   }
  elsif ( $on{view} eq 'allmineinvalid' )
   {
    $query .= "contacts.owner='$auth_user'".
              " and contacts.contacttype<1".
              " and contacts.category<>'group'";
   }
  elsif ( $on{view} eq 'allinvalid' )
   {
    $query .= "contacts.contacttype not between 1 and 10".
              " and contacts.category<>'group'";
   }
  elsif ( $on{view} eq 'allminerecent' || $on{view} eq 'allrecent' )
   {
    $query .= $on{view} eq 'allminerecent'
            ? "contacts.owner='$auth_user'"
            : "1=1";

    $order = $IG::db_driver eq 'sqlite'
	   ? "contacts.contactid desc"
	   : "lpad(contacts.contactid,10,'0') desc";

    $on{alphabet} = 'all';
   }
  else
   {
    ## this is a personal report so load it
    DbQuery("select dbquery from reports where id='".DbQuote($on{view})."'");
    $query .= FetchRow();
   }

  ## filter an alphabet letter
  $on{alphabet} ||= 'A';
  if ( $on{alphabet} ne 'all' )
   {
    $query = "substr(upper(contacts.contactname),1,1)='".
             DbQuote( uc($on{alphabet}) ).
             "' and " .
             $query;
   }

  ## filter only master contact
  $query = "contacts.master='0' and $query";


  ## Create alphabet index
  my (@personal_reports, @reports_rows);
  DbQuery("select id, name from reports ".
	  "where owner='$auth_user' and type='contacts'");
  push @personal_reports, [@reports_rows] while @reports_rows = FetchRow();

  ## define per page view
  my $base_url = "contacts?".
		 "order=$on{order}&amp;".
		 "view=$on{view}&amp;".
		 "sortdirection=$on{sortdirection}&amp;".		 
		 "alphabet=$on{alphabet}";

  my ( $limit,
       $offset,
       $page_selector ) = IG::MkTaskPaging( "select count(*) from contacts ".
                                            "left join contacts_group ".
                                            "on contacts_group.contactid = contacts.contactid ".
                                            "where $query",
                                            $base_url );

  ## do query
  DbQuery("select contacts.contactname, contacts.contactid, contacts.city1,".
	  " contacts.address1, contacts.city2, contacts.address2,".
	  " contacts.owner, contacts.lastupdate, contacts.tel1, contacts.fax,".
	  " contacts.email, users.initial, contacts.contacttype ".
	  "from contacts ".
          ( $query =~ /contacts\_group\.groupid/
            ? "left join contacts_group ".
              "on contacts_group.contactid = contacts.contactid "
            : '' ).
          "left join users ".
          "on contacts.owner = users.login ".
	  "where $query order by $order ".
	  "limit $limit offset $offset");

  HtmlHead( shortcuts => _short_cuts(),
            title     => $lang{contact_management} );
  TaskHead( title     => $lang{contact_management},
            icon      => 0,
            width     => '100%' );

  HLayer( MkButton( text => $lang{new_contact_card},
	            link => "contacts?action=proto" ),
	            
	  MkButton( text => $lang{group_administration},
	            link => "contacts?action=show_groups" ),
	            
	  MkButton( text => $lang{reports},
	            link => "contacts?action=listreport" ),
	            
          MkButton( text => $lang{vendors},
                    link => "vendors",
                    privilege => CheckPrivilege('vendors_view') ),

          MkButton( text => $lang{import_contacts},
                    link => "contacts?action=import_contacts",
                    privilege => CheckPrivilege('contacts_import') ),

         $page_selector
	);
	  
  IG::AlphabetSelector
    (	param   => 'alphabet',
	link    => "contacts?view=$on{view}",
	filter  => Input ( name=>'view',
			   type=>'select',
			   style=>'width: 250px',
			   onchange=>"location.href = 'contacts?alphabet=$on{alphabet}&amp;view=' + this.options[this.selectedIndex].value;",
			   data=>[([ 'allvalid',	$lang{allvalid}],
				   [ 'allinvalid',	$lang{allinvalid}],
				   [ 'allminevalid',	$lang{allminevalid}],
				   [ 'allmineinvalid',	$lang{allmineinvalid}],
				   [ 'allmineold',	$lang{allmineold}],
				   [ 'allrecent',	$lang{allrecent}],
				   [ 'allminerecent',	$lang{allminerecent}],
				   [ 'allpotential',	$lang{allpotential}],
				   [ '',		'-'x50],
				   @personal_reports
				 )] )
   );

  TaskListMenu (	[$lang{code}],
			[$lang{contact_name}],
			[$lang{rif}],
			[$lang{operations_headquarters}],
			[$lang{operating_center}],
			[''] );

  while (my @row = FetchRow())
   {
    my $icons = _action_icons( contactid => $row[1],
                               email     => $row[10],
                               phone     => $row[8],
			       private   => $row[12] == 8,
                               fax       => $row[9] );

    TaskListItem
     (
	[$row[1],
	 "contacts?action=showrecord&amp;backtoreferer=1&amp;contactid=$row[1]",
	 "align=\"right\""],
	[$row[0]],
	[$row[11]],
	["$row[2] $row[3]",'','style="font-size:10px;"'],
	["$row[4] $row[5]",'','style="font-size:10px;"'],
	[$icons, '', 'nowrap']
     );
   }

  TaskListFoot();
  TaskFoot();
  HtmlFoot();
 }

##############################################################################
##############################################################################
sub delexec
 {
  ## Check if we have a linked sub contact
  DbQuery("select contactname, contactid, master from contacts ".
	  "where master= '".DbQuote($on{contactid})."'");
  my ($soc, $uni, $mast) = FetchRow();
  if ( $mast )
   {
    HtmlHead( title => $lang{contact_management} );
    TaskHead( title => $lang{contact_management},
              icon  => 1 );
    TaskMsg(  $lang{Err_subcontact} );
    TaskFoot();
    HtmlFoot();
    return;
   }

  ## Check if vendor-list or prices management is active
  DbQuery("select owner, contactname, vendorslistflag, pricelistflag,".
	  " master, sharemode, category ".
	  "from contacts ".
	  "where contactid='".DbQuote($on{contactid})."'");
  my ($own, $soc, $qual, $prez, $mast, $sharemode, $category) = FetchRow();
  if ( "$qual$prez" =~ /s/i )
   {
    HtmlHead( title => $lang{contact_management} );
    TaskHead( title => $lang{contact_management},
              icon  => 1 );
    TaskMsg( $lang{Err_no_delete} );
    TaskFoot();
    HtmlFoot();
   }
  elsif (   $own eq $auth_user
         || $sharemode == 1
         || CheckPrivilege('sys_user_admin')
        )
   {
    QuoteParams();
    DbQuery( query =>[( "delete from contacts ".
			"where contactid='$in{contactid}'",

			"delete from contacts_group ".
			"where contactid='$in{contactid}'".
			" or groupid='$in{contactid}'"
		     )] );

    if ( $category eq 'group' )
     {
      ## we have deleted a contact group
      LogD("delete group $soc", 'delete', 'contacts_group', $on{contactid});
      IG::Redirect('contacts?action=show_groups');
     }
    elsif ( $mast )
     {
      ## We have deleted a subcontact
      LogD("delete subcontact $soc", "delete", "contacts", $on{contactid});
      IG::Redirect("contacts?".
			"action=showrecord&amp;".
			"default_pane=4&amp;".
			"contactid=$mast" );

     }
    else
     {
      ## we have deleted a contact
      LogD("delete contact $soc", "delete", "contacts", $on{contactid});
      IG::Redirect('contacts');
     }
   }
  else
   {
    HtmlHead( title => $lang{contact_management} );
    TaskHead( title => $lang{contact_management},icon=>1);
    TaskMsg("$lang{Err_cant_delete} " . IG::UsrInf('name',$own));
    TaskFoot();
    HtmlFoot();
   }
 }

###########################################################################
###########################################################################
sub clone
 {
  showrecord();
  $on{contactid} = '';
  protoagg();
 }

###########################################################################
###########################################################################
sub showgroup
 {
  showrecord();
 }

###########################################################################
###########################################################################
sub showrecord
 {
  DbQuery("SELECT * FROM contacts ".
          "where contactid = '".DbQuote($on{contactid})."'");
   (	$on{contactname},
	$on{address1},
	$on{city1},
	$on{zip1},
	$on{prov1},
	$on{piva},
	$on{taxidnumber},
	$on{cciaa},
	$on{jobtitle},
	$on{confidence},
	$on{tel4},
	$on{tel5},
	$on{tel1},
	$on{tel2},
	$on{tel3},
	$on{fax},
	$on{qualification},
	$on{category},
	$on{data1},
	$on{data2},
	$on{note},
	$on{contactid},
	$on{pricelistflag},
	$on{pricelistupdate},
	$on{instant_msgs_type},
	$on{free2},
	$on{lastupdate},
	$on{activity},
	$on{vendorslistflag},
	$on{owner},
	$on{email},
	$on{url},
	$on{address2},
	$on{city2},
	$on{zip2},
	$on{prov2},
	$on{address3},
	$on{city3},
	$on{zip3},
	$on{prov3},
	$on{note1},
	$on{qualifmethod},
	$on{contactvalue},
	$on{passwd},
	$on{nospace},
	$on{personal_doc}, ## ex free3
	$on{instant_msgs_value}, ## ex free4
	$on{master},
	$on{lastfaxowner},
	$on{rea},
	$on{istat},
	$on{economicsector},
	$on{employees},
	$on{billing},
	$on{employername},
	$on{sharemode},
	$on{contactsource},
	$on{birthdate},
	$on{outfromlist},
	$on{contacttype},
	$on{economiczone},
	$on{country1},
	$on{country2},
	$on{country3},
	$on{operativefunction} )  = FetchRow();

  die "You do not have access to this contact" if $on{master} eq '0'
                                               && $on{contacttype} == 8
					       && $on{owner} ne $auth_user;
  if( $on{master} ) 
   {
    DbQuery("select contacttype,owner from contacts ".
	    "where contactid='".DbQuote($on{master})."'");
    my @row = FetchRow();
    die "You do not have access to this contact" if $row[0] == 8
                                                 && $row[1] ne $auth_user;
   }

  if    ($on{category} eq 'group')
   {
    $on{groupnm} = $on{contactname};
    $on{groupid} = $on{contactid};
    participant();
   }
  elsif ($on{action} eq 'clone')
   { return;        }
  elsif ($on{master})
   { protosub();    }
  else
   { proto();       }
 }

##########################################################################
##########################################################################
sub protoagg
 {
  my $nospace;
  my $caps_mode = IG::ConfigParam('contacts.contactname_capitalization_mode');

  if ( $caps_mode eq 'allup' )
   {
    $on{contactname} = uc $on{contactname};
   }
  elsif ( $caps_mode eq 'auto' )
   {
    require IG::TextCapitalize;
    $on{contactname} = Text::Capitalize::capitalize( $on{contactname},
                                                     PRESERVE_ALLCAPS => 1 );
   }
  elsif ( $caps_mode ne 'none' )
   {
    $on{contactname} = uc $on{contactname};
   }

  $on{qualification}		||='0';
  $on{category}			||='0';  
  $on{jobtitle}			= ucfirst( lc( $on{jobtitle} ) );
  $on{owner}			||=$auth_user;
  $on{data1}			||=$tv{today};
  $on{data2}			||=$tv{today};
  $on{pricelistupdate}		||=$tv{today};
  $on{birthdate}                ||=$tv{empty_date};
  $on{city1}			= uc $on{city1};
  $on{city2}			= uc $on{city2};
  $on{city3}			= uc $on{city3};
  $nospace			= lc( $on{contactname} );
  $nospace			=~ s/\.|\-|\'| //g;
  $on{tel1}			=~ s/\.|\-| //g;
  $on{tel2}			=~ s/\.|\-| //g;
  $on{tel3}			=~ s/\.|\-| //g;
  $on{tel4}			=~ s/\.|\-| //g;
  $on{tel5}			=~ s/\.|\-| //g;
  $on{fax}			=~ s/\.|\-| //g;
  $on{contactvalue}		||='0';
  $on{master}			||='0';
  $on{employees}		||='0';
  $on{billing}			||='0';
  $on{sharemode}		||='0';
  $on{contactsource}		||='0';
  $on{outfromlist}		= $on{outfromlist} ? '1' : '0';
  $on{contacttype}		||='0';
  $on{economiczone}		||='0';
  $on{operativefunction}	||='0';

  ## check probable duplicate contacts (by name)
  if ( !$on{contactid} && $nospace && !$on{alert_duplicate} )
   { 
    DbQuery("select contactname, contactid from contacts ".
	    "where lower(nospace) = '$nospace'");
    while (my @row = FetchRow())
     {
      $on{alert_duplicate} .= "$row[1] $row[0]\n";
     }

    push @IG::errmsg, "$lang{Err_duplicate_contact}:\n$on{alert_duplicate}"
      if $on{alert_duplicate};
   }

  ## check probable duplicate contacts (by email)
  if ( !$on{contactid} && $on{email} && !$on{alert_duplicate_email} )
   { 
    my $email = DbQuote( lc ($on{email}) );
    DbQuery("select contactname, contactid from contacts ".
	    "where lower(email) = '$email'");
    while (my @row = FetchRow())
     {
      $on{alert_duplicate_email} .= "$row[1] $row[0]\n";
     }

    push @IG::errmsg, "$lang{Err_duplicate_email}:\n$on{alert_duplicate_email}"
      if $on{alert_duplicate_email};
   }

  ## Any error?
  push @IG::errmsg, IG::FormValidate();
  if ( @IG::errmsg )
   {
    $on{category} eq 'group' ? protogroup()
                             : $on{master} ? protosub()
                                           : proto();
    return;
   }

  ## make unique id to new contacts
  if ( !$on{contactid} )
   {
    ## it's a new contact
    $on{contactid} = _mk_new_id();

    LogD("insert contact $on{contactname}",
	 "insert",
	 "contacts",
	 $on{contactid});
   }
  else
   {
    if ( ! _can_edit_master( $on{master} || $on{contactid} ) )
     {
      push @IG::errmsg, $lang{Err_no_rigth};
      $on{master} ? protosub() : proto();
      return;
     }

    LogD("updated contact $on{contactname}",
	 "update",
	 "contacts",
	 $on{contactid});
   }

  DbWrite( overwrite_clause => "contactid = '".DbQuote($on{contactid})."'",
           action           => 'insert',
           table            => 'contacts',
           values           => [ $on{contactname},
                                 $on{address1},
                                 $on{city1},
                                 $on{zip1},
                                 $on{prov1},
                                 $on{piva},
                                 $on{taxidnumber},
                                 $on{cciaa},
                                 $on{jobtitle},
                                 $on{confidence},
                                 $on{tel4},
                                 $on{tel5},
                                 $on{tel1},
                                 $on{tel2},
                                 $on{tel3},
                                 $on{fax},
                                 $on{qualification},
                                 $on{category},
                                 $on{data1},
                                 $on{data2},
                                 $on{note},
                                 $on{contactid},
                                 $on{pricelistflag},
                                 $on{pricelistupdate},
                                 $on{instant_msgs_type},
                                 $on{free2},
                                 $tv{today},
                                 $on{activity},
                                 $on{vendorslistflag},
                                 $on{owner},
                                 $on{email},
                                 $on{url},
                                 $on{address2},
                                 $on{city2},
                                 $on{zip2},
                                 $on{prov2},
                                 $on{address3},
                                 $on{city3},
                                 $on{zip3},
                                 $on{prov3},
                                 $on{note1},
                                 $on{qualifmethod},
                                 $on{contactvalue},
                                 $on{passwd},
                                 $nospace,
                                 $on{personal_doc},
                                 $on{instant_msgs_value},
                                 $on{master},
                                 $on{lastfaxowner},
                                 $on{rea},
                                 $on{istat},
                                 $on{economicsector},
                                 $on{employees},
                                 $on{billing},
                                 $on{employername},
                                 $on{sharemode},
                                 $on{contactsource},
                                 $on{birthdate},
                                 $on{outfromlist},
                                 $on{contacttype},
                                 $on{economiczone},
                                 $on{country1},
                                 $on{country2},
                                 $on{country3},
                                 $on{operativefunction},
                                 $on{external_reference_id},
                               ]);

  if ( $on{passwd} && $IG::htaccess_contacts )
   {
    ## Change contact password in htpasswd file
    require IG::Utils;
    IG::HtPasswd( htaccess_file => $IG::htaccess_contacts,
                  login         => $on{contactid},
                  password      => $on{passwd}
	        ) or die("Can't update Apache accounts database in ".
	                 "'$IG::htaccess_contacts' to insert '$on{contactid}' ".
	                 "user.\n");
   }

  if ( $on{backtoreferer} )
   {
    IG::BackToReferer();
   }  
  elsif ( $on{backtoformid} )
   {
    IG::Redirect("contacts?".
                 'keytofind='.MkUrl($on{contactname}).'&amp;'.
                 "formid=$on{backtoformid}");
   }
  elsif ( !$on{master} )
   {
    if ( $on{save_contact} )
     {
      my $alphabet = substr($on{contactname},0,1) || 'A';
      IG::Redirect("contacts?alphabet=$alphabet");
     }
    else
     {
      IG::Redirect( "contacts?".
			"action=showrecord&amp;".
			"edit=1&amp;".
			"contactid=$on{contactid}" );
     }
   }
  else
   {
    IG::Redirect( "contacts?".
			"action=showrecord&amp;".
			"default_pane=4&amp;".
			"contactid=$on{master}" );
   }
 }

#############################################################################
#############################################################################
sub proto
 {
  require IG::Utils;
  my $_write_mode =    (   !$on{contactid}
                        || $on{edit}
                        || IG::ConfigParam('contacts.direct_editing') )
                    && _can_edit_master( $on{contactid} )
                  ? 1
                  : 0;

  if ( $on{edit} && !$_write_mode ) 
   {
    push @IG::errmsg, $lang{Err_no_rigth};
   }

  my $th_icons;
  my %ajax_req;
  my $contact_owner = IG::TextElide( string =>    IG::UsrInf('name', $on{owner})
                                               || IG::Blush( $lang{to_assign} ),
                                     length => 30 );

  my %available_panels =
     ( contracts
                 => { ajax_link => "contracts?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('contracts_view') }
                    },

       offers
                 => { ajax_link => "offers?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('offers_view') }
                    },

       fax_received
                 => { ajax_link => "fax_received?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('fax_received_view') }
                    },

       fax_sent
                 => { ajax_link => "fax_sent?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('fax_sent_view') }
                    },

       emails
                 => { ajax_link => "webmail?".
				   "action=ajax_headers&amp;".
				   "ajax_request=1&amp;".
				   "to=".MkUrl($on{email})."&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('webmail_view') }
                    },

       binders
                 => { ajax_link => "binders?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('binders_view') }
                    },

       orders
                 => { ajax_link => "orders?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('orders_view') }
                    },

       archive
                 => { ajax_link => "archive?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('archive_view') }
                    },

       equipments
                 => { ajax_link => "equipments?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('equipments_view') }
                    },

       letters
                 => { ajax_link => "letters?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('letters_view') }
                    },

       todo
                 => { ajax_link => "todo?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "owner=all&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('todo_view') }
                    },

       events
                 => { ajax_link => "calendar?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "user=$auth_user&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { 1 }
                    },

       opportunities
                 => { ajax_link => "opportunities?".
				   "action=findexec&amp;".
				   "ajax_request=1&amp;".
				   "contactid=$on{contactid}",
                      checks    => sub { CheckPrivilege('opportunities_view') }
                    },

       personalized_fields
                 => { ajax_link => "igforms?".
                                   "action=build_form_mask&amp;".
				   "igformid=contacts&amp;".
				   "recordid=$on{contactid}",
                      checks    => sub { CheckPrivilege('igforms_view') }
                    },
       open_repository
                 => { ajax_link => "filemanager?".
                                   "action=getrepositorypan&amp;".
                                   "width=&amp;".
                                   "height=225px&amp;".
				   "repid=$on{contactid}&amp;".
				   "repapp=contacts",
                      checks    => sub { CheckPrivilege('filemanager_view') }
                    }
     );
     
  my @panels;
  my $layer_cnt = 6;
  my $_repository_flag;

  if ( $on{contactid} )
   {
    my $pnls = IG::ConfigParam('contacts.panels_order')
               || 'todo|events|emails|personalized_fields|open_repository|';

    $_repository_flag++ if $pnls =~ /open\_repository/;

    for my $pn ( split /\|/, $pnls )
     {
      my $privilege = &{$available_panels{$pn}{checks}};
      $ajax_req{"get${pn}list"} = $available_panels{$pn}{ajax_link}
        if $privilege;

      push @panels, [ $lang{$pn},
                      $privilege ? '&nbsp;' : '', 
                      "get${pn}list".
                      "(['NO_CACHE'],['layer_content$layer_cnt'])" ];
      $layer_cnt++;
     }
   }


  $ajax_req{getstafflist}
			      = "contacts?".
				"action=findstaff&amp;".
				"ajax_request=1&amp;".
				"contactid=$on{contactid}&amp;".
				"contacttype=$on{contacttype}"
			      if $on{contactid};

  HtmlHead( ajax_req  => \%ajax_req,
            title     => $on{contactid} 
		         ? "$on{contactid} - $on{contactname}"
                         : $lang{new_contact_card},
	    shortcuts => $on{backtoformid} ? '' : _short_cuts() );

  if ( !$on{contactid} )
   {
    TaskHead(	title    => $lang{new_contact_card},
		minwidth => 650 );
   }
  else
   {
    if (!$on{print})
     {
      $th_icons = HLayer(bottom_space => 1,
			 intra_space  => 1,
			 layers       => [
			 
		( !$_write_mode
		  ? Img(href=>	"contacts?".
				"action=showrecord&amp;".
		                "contactid=$on{contactid}&amp;".
				"edit=1",
			src=>	"$IG::img_url/deepblue_edit.gif",
			title=>	$lang{edit} )
		  : ''),

 		Img(	href=>	"contacts?".
				"action=protosub&amp;".
				"master=$on{contactid}",
			src=>	"$IG::img_url/addsubcontact.gif",
			width=> 26,
			title=>	$lang{add_contact} ),

		Img(	href=>	"contacts?".
				"action=contactevents&amp;".
				"calendar=1&amp;".
				"todo=1&amp;".
				"webmail=1&amp;".
				"fax_received=1&amp;".
				"fax_sent=1&amp;".
				"contactid=$on{contactid}",
			src=>	"$IG::img_url/events.gif",
			width=> 26,
			title=>	$lang{documents_summary} ),

		( CheckPrivilege('services_view')
		  ? Img(href=>	"services_notes?contactid=$on{contactid}",
			width=> 26,
			src=>	"$IG::img_url/addnote.gif",
			title=>	$lang{notes} )
		  : ''),

		( CheckPrivilege('services_report')
		  ? Img(href=>	"services_notes?action=scheda&amp;contactid=$on{contactid}",
			width=> 26,
			src=>	"$IG::img_url/servicestats.gif",
			title=>	$lang{services_status} )
		  : ''),

		( CheckPrivilege('products_view') && $on{pricelistflag} eq 's'
		  ? Img(href=>	"products?".
				"action=revisione&amp;".
				"contactid=$on{contactid}",
			src=>	"$IG::img_url/product.gif",
			width=> 26,
			title=>	$lang{products} )
		  : ''),

		( $on{vendorslistflag} eq 's' && CheckPrivilege('vendors_edit')
		  ? Img(href=>	"vendors?".
				"action=proto&amp;".
				"contactid=$on{contactid}",
			src=>	"$IG::img_url/vendorslist.gif",
			width=> 26,
			title=>	"$lang{card} $lang{vendor}" )
		  : ''),

		( $auth_user eq $on{owner} || CheckPrivilege("sys_user_admin")
		  ? Img(href=>	"contacts?".
				"action=configure&amp;".
				"contactid=$on{contactid}",
			src=>	"$IG::img_url/prefs.png",
			width=> 26,
			title=>	$lang{configure} )
		  : '')
	]);
     }

    TaskHead( title=> "$lang{card} n. $on{contactid}".
		      ( $on{contactvalue} ? " - $lang{category} ".
					    GetTableVal('contactvalue',
							$on{contactvalue} )
					  : '' ),
	      minwidth=> 650 );

    TaskMsg(
    HLayer( left_layers  => [ $th_icons ],
	    right_layers => [ "$lang{assigned_to}: ".
	                       "<strong><u>$contact_owner</u></strong><br>".
			      "$lang{last_change}: $on{lastupdate}".
			      (    $on{contactid}
			        && IG::CheckPrivilege('sys_log_view')
			        ? Img( src   => "$IG::img_url/history.gif",
			               width => 16,
			               title => $lang{system_log},
			               align => 'absmiddle',
			               href  => "system_log?action=findexec&amp;".
	                                         "fastfind=1&amp;".
                                                 "keytofind=$on{contactid}&amp;".
                                                 "targettable=contacts")
                                : '')
                            ],
	    bottom_space => 0
	  ), 7);
     
    IG::MkRepository( id => $on{contactid} ) if !$_repository_flag;
   }

  FormHead (	name      => 'contact',
		status    => $_write_mode ? 'rw' : 'r',
		labelstyle=> 'width:130px',
		cgiaction => 'protoagg',
		autofocus => $on{contactid} ? 'false' : '',
		ckchanges => 'true' );

  Input (	type=>'hidden', name=>'alert_duplicate');
  Input (	type=>'hidden', name=>'alert_duplicate_email');
  Input (	type=>'hidden', name=>'contactid');
  Input (	type=>'hidden', name=>'owner');
  Input (	type=>'hidden', name=>'contactvalue');
  Input (	type=>'hidden', name=>'sharemode');
  Input (	type=>'hidden', name=>'note1');
  Input (	type=>'hidden', name=>'lastfaxowner');
  Input (	type=>'hidden', name=>'vendorslistflag');
  Input (	type=>'hidden', name=>'qualifmethod');
  Input (	type=>'hidden', name=>'qualification');
  Input (	type=>'hidden', name=>'category');
  Input (	type=>'hidden', name=>'activity');
  Input (	type=>'hidden', name=>'data1');
  Input (	type=>'hidden', name=>'data2');
  Input (	type=>'hidden', name=>'pricelistflag');
  Input (	type=>'hidden', name=>'pricelistupdate');
  Input (	type=>'hidden', name=>'free2');
  Input (	type=>'hidden', name=>'backtoformid');


  Input (	show     => $lang{contact_name},
		type     => 'text',
		name     => 'contactname',
		validate => { mandatory => 'true',
		              onerror   => $lang{Err_contact_name} },
		style    => 'width: 500px',
		maxlen   => 70 );

  Input (	show=>$lang{contact_type},
		type=>'select',
		style=>'width: 160px',
		zerovalue=>'true',
		data=>{ 1 => $lang{type1},
			2 => $lang{type2},
			3 => $lang{type3},
			4 => $lang{type4},
			5 => $lang{type5},
			6 => $lang{type6},
			7 => $lang{type7},
			8 => $lang{type8},
			9 => $lang{type9},
			10=> $lang{type10}, },
		name=>'contacttype');

  Input (	show=>$lang{economic_sector},
		type=>'basictable',
		zerovalue=>'true',
		float=>'left',
		style=>'width: 190px; font-size:10px;',
		name=>'economicsector');

  Input (	show=>$lang{telephone_exchange},
		type=>'phonenumber',
		name=>'tel1',
		style=> $_write_mode
                     ? 'width:142px'
                     : 'width:160px',
		maxlen=>20);

  Input (	show=>'Fax',
		type=>'faxnumber',
		name=>'fax',
		float=>'left',
		style=> $_write_mode && CheckPrivilege('igfax_send')
                     ? 'width:170px'
                     : 'width:190px',
		maxlen=>20);


  #####################################################################
  ## Tab Pane

  my $pan0 = Input (	show=>$lang{address},
			type=>'text',
			name=>'address1',
                        style=>'width:350px;',
			maxlen=>50,
			onblur=>"if ( document.contact.address2.value=='' )".
				" { document.contact.address2.value=this.value }").

	     Input (	show=>$lang{city},
			type=>'text',
			name=>'city1',
                        style=>'width:350px;',
			maxlen=>35,
			onblur=>"if ( document.contact.city2.value=='' )".
				" { document.contact.city2.value=this.value }").

	     Input (	show=>$lang{zip_code},
			type=>'text',
			name=>'zip1',
                        style=>'width:350px;',
			maxlen=>15,
			onblur=>"if ( document.contact.zip2.value=='' )".
				" { document.contact.zip2.value=this.value }").

	     Input (	show=>$lang{province},
			type=>'text',
			name=>'prov1',
                        style=>'width:350px;',
			maxlen=>2,
			onblur=>"this.value=this.value.toUpperCase(); ".
				"if ( document.contact.prov2.value=='' )".
				" { document.contact.prov2.value=this.value }").

	     Input (	show=>$lang{country},
			type=>'select',
			name=>'country1',
			value=>$IG::soc_country,
			style=>'width:160px',
			data=>\%IG::countries,
			zerovalue=>'true');

  $pan0 .=   Img(	href  => IG::MkMapLink( country => $on{country1},
					        zip     => $on{zip1},
					        address => $on{address1},
					        city    => $on{city1} ),
			title => "maps.google.com",
		        style => 'margin-top:3px;width:20px',
			src   => "$IG::img_url/map.png" ) if !$on{print};

  $pan0 .=   Input (	show=>$lang{phone_number},
			type=>'phonenumber',
			name=>'tel2',
			style=>'width:160px',
			maxlen=>20);


  my $pan1 = Input (	show=>$lang{address},
			type=>'text',
			name=>'address3',
                        style=>'width:350px;',
			maxlen=>50,
			onblur=>"if ( document.contact.address1.value=='' )".
				" { document.contact.address1.value=this.value }").

	     Input (	show=>$lang{city},
			type=>'text',
			name=>'city3',
                        style=>'width:350px;',
			maxlen=>35,
			onblur=>"if ( document.contact.city1.value=='' )".
				" { document.contact.city1.value=this.value }").

	     Input (	show=>$lang{zip_code},
			type=>'text',
			name=>'zip3',
                        style=>'width:350px;',
			maxlen=>15,
			onblur=>"if ( document.contact.zip1.value=='' )".
				" { document.contact.zip1.value=this.value }").

	     Input (	show=>$lang{province},
			type=>'text',
			name=>'prov3',
                        style=>'width:350px;',
			maxlen=>2,
			onblur=>"this.value=this.value.toUpperCase(); ".
				"if ( document.contact.prov1.value=='' )".
				" { document.contact.prov1.value=this.value }").

	     Input (	show=>$lang{country},
			type=>'select',
			name=>'country3',
			style=>'width:160px',
			value=>$IG::soc_country,
			data=>\%IG::countries,
			zerovalue=>'true');

  $pan1 .=   Img(	href  => IG::MkMapLink( country => $on{country3},
					        address => $on{address3},
					        zip     => $on{zip3},
					        city    => $on{city3} ),
			title => "maps.google.com",
        		style => 'margin-top:3px;width:20px',
			src   => "$IG::img_url/map.png" ) if !$on{print};

  $pan1 .=   Input (	show=>$lang{phone_number},
			type=>'phonenumber',
			name=>'tel3',
			style=>'width:160px',
			maxlen=>20);


  my $pan2 = Input (	show=>$lang{address},
			type=>'text',
			name=>'address2',
                        style=>'width:350px;',
			maxlen=>50).

	     Input (	show=>$lang{city},
			type=>'text',
			name=>'city2',
                        style=>'width:350px;',
			maxlen=>35).

	     Input (	show=>$lang{zip_code},
			type=>'text',
			name=>'zip2',
                        style=>'width:350px;',
			maxlen=>15).

	     Input (	show=>$lang{province},
			type=>'text',
			name=>'prov2',
                        style=>'width:350px;',
			maxlen=>2,
			onblur=>"this.value=this.value.toUpperCase()").

	     Input (	show=>$lang{country},
			type=>'select',
			name=>'country2',
			style=>'width:160px',
			value=>$IG::soc_country,
			data=>\%IG::countries,
			zerovalue=>'true');

  $pan2 .=   Img(	href  => IG::MkMapLink( country => $on{country2},
			                        address => $on{address2},
					        zip     => $on{zip2},
					        city    => $on{city2} ),
			title => "maps.google.com",
		        style => 'margin-top:3px;width:20px',
			src   => "$IG::img_url/map.png" ) if !$on{print};

  $pan2 .=   Input (	show=>$lang{zone},
			type=>'basictable',
			zerovalue=>'true',
			name=>'economiczone');



  my $pan3 = Input (	show=>$lang{company_owner},
			type=>'text',
			name=>'employername',
			style=>'width: 150px',
			maxlen=>60).

             Input (    type=>'text',
                        show=>$lang{personal_document},
                        float=>'left',
                        style=>'width:150px',
                        maxlen=>20,
                        name=>'personal_doc' ).

	     Input (	show=>$lang{vat_number},
			type=>'text',
			name=>'piva',
			style=>'width: 150px',
			maxlen=>20).

	     Input (	show=>'C.C.I.A.A.',
			type=>'text',
			name=>'cciaa',
			float=>'left',
			style=>'width: 150px',
			maxlen=>20).

	     Input (	show=>$lang{vat_code},
			type=>'text',
			name=>'taxidnumber',
			style=>'width: 150px',
			maxlen=>20).
	
	     Input (	show=>'REA',
			type=>'text',
			float=>'left',
			name=>'rea',
			style=>'width: 150px',
			maxlen=>20).

	     Input (	show=>'Cod. ISTAT',
			type=>'text',
			name=>'istat',
			style=>'width: 150px',
			maxlen=>20).

	     Input (	show=>$lang{contact_origin},
			type=>'basictable',
			zerovalue=>'true',
			float=>'left',
			style=>'width: 150px; font-size:10px;',
			name=>'contactsource').

	     Input (	show=>$lang{operators},
			type=>'text',
			name=>'employees',
			style=>'width: 150px',
			maxlen=>20).

	     Input (	show=>$lang{billing},
			type=>'basictable',
			zerovalue=>'true',
			float=>'left',
			style=>'width: 150px;font-size:10px;',
			name=>'billing').

	     Input (	show=> "<a href=\"javascript:winPopUp('webmail?".
						"action=composemessage&amp;".
						($on{contacttype} == 8 
						 ? 'sharemode=2&amp;' 
						 : '').
						"onsend=close&amp;".
						"to=$on{email}',700,600,".
						"'compose')\">".
                               "$lang{email}</a>",
			type=>'email',
                        validate => { onerror => $lang{Err_email_address} },
			style=>'width: 150px;',
			name=>'email',
			size=>50,
			maxlen=>40).

	     Input (	show=>$lang{no_email},
			type=>'checkbox',
			float=>'left',
			name=>'outfromlist').
		
	     Input (	show=>"<a href=\"".
	                      ( $on{url} =~ /^http\:/
	                        ? ''
	                        : 'http://').
                              "$on{url}\">http://</a>",
			type=>'text',
			style=>'width: 150px',
			name=>'url',
			maxlen=>100).

	     Input (	show=>$lang{portal_password},
			type=>'text',
			name=>'passwd',
			style=>'width: 150px',
			float=>'left',
			maxlen=>10).
			
             Input (    show=>'Instant messaging',
                        type=>'select',
                        data=>['ICQ','Msn','Yahoo','Skype'],
                        style=>'width:60px; font-size:10px;',
                        name=>'instant_msgs_type' ).

             Input (    type=>'text',
                        float=>'left',
                        style=>'width:90px',
                        maxlen=>20,
                        name=>'instant_msgs_value' );

  my $pan4 =  $on{contactid}
	   ? '&nbsp;'
	   : '';   ## Referents

  my $pan5 = Input (	show=>$lang{notes},
			type=>'textarea',
			style=>'width:560px; height:180px;',
			labelstyle=>'width:auto; height:190px;',
			name=>'note');


  IG::TabPane( data=>[( [$lang{operations_headquarters},
			 $pan0],

			[$lang{legal_situs},
			 $pan1],

			[$lang{operating_center},
			 $pan2],

			[$lang{misc_info},
			 $pan3],

			[$lang{staff},
			 $pan4, 
			 "getstafflist(['NO_CACHE'],['layer_content4'])"],

			[$lang{notes},
			 $pan5],

                        @panels
		       )],
		width   => '100%',
		height  => 230,
		default => $on{default_pane});


  ## End Tab Pane
  ######################################################################

  Input( type    => 'reset',
         value   => $lang{restore} );

  Input( type    => 'submit',
         name    => 'update_contact',
         float   => 'left',
         value   => $lang{apply} );

  Input( type    => 'submit',
         name    => 'save_contact',
         float   => 'left',
         value   => $lang{save} ) if $on{contactid};
         
  FormFoot();
  TaskFoot();
  HtmlFoot();
  LogD( $on{contactname},
        'view',
        'contacts',
        $on{contactid} ) if $on{contactid};
 }

###########################################################################
###########################################################################
sub _action_icons
 {
  my %data = @_;
  $data{masterid} ||= $data{contactid};
  my $icons;
  return '' if !$data{contactid} || $on{print};

  ## email icon
  $icons   .= Img( src  => "$IG::img_url/email_go.png",
                   width=> 16,
                   title=> $lang{send_email},
                   href => "javascript:winPopUp('webmail?".
					"action=composemessage&amp;".
					"contactid=$data{masterid}&amp;".
					"onsend=close&amp;".
					($data{private} ? 'sharemode=2&amp;' : '').
					"to=". MkUrl($data{email}). "'".
                           ",700,560,'compose')"
                 ) if $data{email} && CheckPrivilege('webmail_new');

  ## sms icon
  $icons   .= Img( src  => "$IG::img_url/sms_send.gif",
                   width=> 16,
                   title=> $lang{send_sms},
                   href => "javascript:winPopUp('igsms?".
                                        "action=composemessage&amp;".
                                        "to=$data{sms}".
                           "',370,250,'composesms')"
                 ) if $data{sms} && CheckPrivilege('sys_sms_send');

  ## phone icon
  $icons   .= Img( src  => "$IG::img_url/telephone.png",
                   width=> 16,
                   title=> $lang{place_a_call},
                   href => IG::ConfigParam('asterisk.call_manager_status') eq 'enabled'
                        ?  "javascript:winPopUp".
                           "('asterisk?action=place_call&amp;".
                                      "contactid=$data{masterid}&amp;".
                                      "number=$data{phone}',350,250,'asterisk');"
                        :  $IG::plugin_conf{voip}{protocol}.
                           $IG::plugin_conf{voip}{prefix}.
                           $data{phone}
                 ) if $data{phone} && $IG::plugin_conf{voip}{protocol};

  ## fax icon
  $icons   .= Img( src  => "$IG::img_url/mime_mini_fax.png",
                   width=> 16,
                   title=> $lang{send_fax},
                   href => "igfax?action=sendfax&amp;".
                           "differentfaxnumber=$data{fax}&amp;".
                           "contactid=$data{masterid}&amp;".
                           "sendbyfax=1"
                 ) if $data{fax} && CheckPrivilege('igfax_send');

  return $icons;
 }

###########################################################################
###########################################################################
sub _can_edit_master
 {
  return 1 if CheckPrivilege('sys_user_admin');
  my $contactid = DbQuote(shift);
  if ( $contactid )
   {
    DbQuery("select sharemode, owner from contacts ".
            "where contactid='$contactid'");
    my ($_sharemode, $_owner) = FetchRow();

    return    ( $_sharemode != 2 || $_owner eq $auth_user || !$_owner )
           && CheckPrivilege('contacts_edit')
           ? 1
           : 0;
   }
  else
   {
    return CheckPrivilege('contacts_new') ? 1 : 0;
   }
 }

###########################################################################
###########################################################################
sub findstaff
 {
  HttpHead( expires => '+30s' );

  $on{contacttype} ||= '0';

  ## Find SubContacts
  DbQuery("select contactid, contactname, tel1, fax, note, email,".
	  " jobtitle, tel3, operativefunction ".
	  "from contacts ".
	  "where ". ( $on{contactid}
	              ? "master='".DbQuote($on{contactid})."'"
	              : "1=0").
	  " order by contactname");

  if ($on{contactid})
   { 
    TaskMsg( Input( type=>'button',
                    float=>'right',
                    onclick=>"document.location = '".
                                "contacts?".
                                        "action=protosub&amp;".
                                        "master=$on{contactid}';",
                    show=>$lang{add_contact},
                    fieldstyle=>'margin:0px',
                    style=>'margin:0px;font-size:10px; height:15px' ).
	     Img( src   => "$IG::img_url/group.gif",
	          width => 16,
                  style => 'margin-right:2px',
                  align => 'absmiddle').
             "<a href=\"contacts\">$lang{contacts}</a>"
            ,7);

    TaskListMenu (
			[$lang{code}],
			[''],
			[$lang{contact_name}],
			[$lang{phone_number}],
			[$lang{mobile_phone}],
			[$lang{operative_function}],
			[]);

    while (my @row = FetchRow())
     {
      my $icons = _action_icons( contactid => $row[0],
	                         masterid  => $on{contactid},
                                 email     => $row[5],
				 private   => $on{contacttype} == 8,
                                 sms       => $row[7],
                                 phone     => $row[2],
                                 fax       => $row[3] );

      TaskListItem(
		[Img( src   => "$IG::img_url/user.gif",
		      align => 'absmiddle',
		      width => 16,
		      style => 'margin-right:3px') . $row[0],
		 "contacts?action=showrecord&amp;contactid=$row[0]",
		 'nowrap'],
 		[$row[6],
 		 '',
 		 'style="color:$IG::clr{font_low_evidence}; font-size:10px; text-align:right;"'],
 		[$row[1]],
		[$row[2]],
		[$row[7]],
		[GetTableVal('operative_functions', $row[8]) || $row[4] ],
		[$icons, '', 'nowrap']
		  );
     }
    TaskListFoot(7);
   }
 }

###########################################################################
###########################################################################
sub contactevents
 {
  my ($events_order, %list, $d1, $d2, $d3, $user);
  my $counter;
  $on{fromdate} ||= IG::SumDate( $tv{day}, $tv{month}, $tv{year}, -365);
  $on{todate}   ||= IG::SumDate( $tv{day}, $tv{month}, $tv{year},  365);
  $on{user}     ||= 'all';

  HtmlHead(     title=>$lang{documents_summary} );
  TaskHead(	title=>$lang{documents_summary},
		icon=>0,
		width=>'100%');

  DbQuery ("select contactname, email from contacts ".
	   "where contactid='".DbQuote($on{contactid})."'");
  my ($contact_name, $contact_email) = FetchRow();

  PrOut "<table width=\"100%\">";
  if (!$on{print})
   {
    my $layer.= FormHead(cgiaction=>'contactevents',
			 labelstyle=>'width: 70px',
			 name=>'proto').

		Input (	type=>'hidden',
			name=>'contactid').

		Input (	show=>$lang{user},
			type=>'logins',
			style=>'font-size:10px; width:130px',
			allvalue=>'true',
			name=>'user').

		Input (	show=>$lang{from_date},
			type=>'date',
			name=>'fromdate').

		Input (	show=>$lang{to_date},
			type=>'date',
			name=>'todate').

		Input (	type=>'label',
			labelstyle=>'border:0px; background-color:transparent',
			show=>$lang{view});

    $layer .=	Input (	show=>"<a href=\"todo?action=protomaster&amp;contactid=$on{contactid}\">ToDo</a>",
			type=>'checkbox',
			name=>'todo') if CheckPrivilege('todo_view');

    $layer .=	Input (	show=>"<a href=\"calendar?user=$auth_user&amp;calendarday=$tv{day}&amp;calendarmonth=$tv{month}&amp;calendaryear=$tv{year}\">$lang{calendar}</a>",
			type=>'checkbox',
			name=>'calendar');

    $layer .=	Input (	show=>$contact_email
			      ? "<a href=\"javascript:winPopUp('webmail?action=composemessage&onsend=close&to=".
				MkUrl($contact_email).
				"',700,560,'compose')\">$lang{email}</a>"
			      : $lang{email},
			type=>'checkbox',
			name=>'webmail') if CheckPrivilege('webmail_view');

    for (qw ( fax_received fax_sent archive letters offers orders ))
     {
	$layer .=	Input (	show=>$lang{$_},
				type=>'checkbox',
				name=>$_) if CheckPrivilege($_ . '_view');
     }

    $layer .=	Input (	name=>'allbox',
			show=>$lang{all},
			onclick=>'CheckAll()',
			type=>'checkbox' ).

		Input (	type=>'submit',
			style=>'width: 210px; margin-top:10px;',
			value=>$lang{process} ).

		FormFoot();

    PrOut "<td width=250 valign=\"top\">";

    TaskMsg(Img( src=>"$IG::img_url/contact.gif", align=>'absmiddle').
	    "<a style=\"margin-left:5px;\"".
	    " href=\"contacts?".
		    "action=showrecord&amp;".
		    "contactid=$on{contactid}\">".
	    $contact_name.
	    "</a>", 4);

    TaskMsg($layer, 4);

    PrOut "</td>";
   }
  PrOut "<td valign=\"top\">";

  TaskListMenu( [''],
		[$lang{type}],
		[$lang{event},"","width=100%"],
		[Img( src=>"$IG::img_url/user.gif", width=>16 )],
		[$lang{date}],
	      );

  ## QUOTE PARAMS
  QuoteParams();

  ## get calendar events
  if ($on{calendar})
   {
    $user = $on{user} ne 'all' ? "and touser='$in{user}'" : "";
    my @calendar_type=(	$lang{appointment},
			$lang{appointment},
			$lang{telephone_call},
			"$lang{message} E-mail",
			$lang{meeting} );

    DbQuery("SELECT touser, startdate, starttime,".
                  " eventtext, eventtype, eventid ".
	    "FROM calendar ".
	    "WHERE contactid='$in{contactid}'".
	    " and startdate>='$in{fromdate}'". 
	    " and startdate<='$in{todate}' $user");

    while (my @row = FetchRow())
     {
      $counter++;
      $row[2] = $row[4] == 5
	      ? 'Memo'
	      : substr('00'.$row[2],-4,2).':'.substr($row[2],-2,2);
 
      ($d1, $d2, $d3) = IG::GetValuesByDate($row[1]);
      $events_order   = $d3.$d2.$d1.$counter;
 
      $list{$events_order}[0]	= IG::UsrInf('name',$row[0]);
      $list{$events_order}[1]  	= "$row[1] $row[2]";
      $list{$events_order}[2]  	= Img( src=>"$IG::img_url/clock.gif");
      $list{$events_order}[3]	= $calendar_type[$row[4]];
      $list{$events_order}[4]	= $row[3];
     }
   }

  ## TODO
  if ($on{todo} &&  CheckPrivilege("todo_view"))
   {
    $user = $on{user} ne 'all' ? "and owner='$in{user}'" : '';

    DbQuery("SELECT todo.todoid, todo.startdate, todo.todotext, todo.duedate,".
	    " todo.contactid, todo.owner,todo.duedate-current_date ".
	    "FROM todo ".
	    "WHERE todo.contactid='$in{contactid}' and".
	    " todo.startdate>'$in{fromdate}' and".
	    " todo.startdate<'$in{todate}' $user");

    while (my @row = FetchRow())
     {
      $counter++;
      ($d1,$d2,$d3) = IG::GetValuesByDate($row[1]);
      $events_order = $d3.$d2.$d1.$counter;
 
      $list{$events_order}[0]	= IG::UsrInf('name',$row[5]);
      $list{$events_order}[1]  	= $row[1];
      $list{$events_order}[2]  	= "--";
      $list{$events_order}[3]	= "ToDo";
      $list{$events_order}[4]	= $row[2];
     }
   }

  ## FAX SENT
  if ($on{fax_sent} &&  CheckPrivilege("fax_sent_view"))
   {
    $user = $on{user} ne 'all' ? "and owner='$in{user}'" : '';

    DbQuery("select id, owner, issue, faxnumber, note, timeissue ".
	    "from fax_sent ".
	    "where contactid='$in{contactid}'".
	    " and issue>'$in{fromdate}' and issue<'$in{todate}' $user");

    while (my @row=FetchRow())
     {
      ++$counter;
      ($d1,$d2,$d3) = IG::GetValuesByDate($row[2]);
      $events_order = $d3.$d2.$d1.$counter;

      $list{$events_order}[0]	= IG::UsrInf('name',$row[1]);
      $list{$events_order}[1]  	= "$row[2] $row[5]";
      $list{$events_order}[2]  	= Img( src=>"$IG::img_url/bullet_out.gif");
      $list{$events_order}[3]	= $lang{fax_sent};
      $list{$events_order}[4]	= "$lang{protocol_number} $row[0] $row[4]";
     }
   }

  ## FAX RECEIVED
  if ($on{fax_received} &&  CheckPrivilege("fax_received_view"))
   {
    $user = $on{user} ne 'all' ? "and owner='$in{user}'" : '';

    DbQuery("select id, contactname, issue, timeissue, note, category, owner ".
	    "from fax_received ".
	    "where contactid='$in{contactid}'".
	    " and issue>'$in{fromdate}' and issue<'$in{todate}' $user");

      while ( my @row = FetchRow() )
       {
        ++$counter;
        ($d1,$d2,$d3) = IG::GetValuesByDate($row[2]);
        $events_order = $d3.$d2.$d1.$counter;

        $list{$events_order}[0]	= IG::UsrInf('name',$row[6]);
        $list{$events_order}[1] = "$row[2]<br>$row[3]";
        $list{$events_order}[2] = Img( src=>"$IG::img_url/bullet_in.gif" );
        $list{$events_order}[3]	= $IG::docs_type{$row[5]};
        $list{$events_order}[4]	= "Fax $lang{protocol_number} $row[0] $row[4]";
       }
   }

  ## EMAIL
  if ($on{webmail} &&  CheckPrivilege("webmail_view"))
   {
    $user = $on{user} ne 'all' ? "and owner='$in{user}'" : '';

    DbQuery("select id, sender, receiver, issue, timeissue, subject, owner,".
	    " category, sharemode, pid ".
	    "from email_msgs ".
	    "where contactid='$in{contactid}'".
	    " and issue>'$in{fromdate}' and issue<'$in{todate}'".
	    " and sharemode<>2 $user");

    while ( my @row = FetchRow() )
     {
      ++$counter;
      ($d1,$d2,$d3) = IG::GetValuesByDate($row[3]);
      $events_order = $d3.$d2.$d1.$counter;

      my $user_email_address = quotemeta( IG::UsrInf('email',$row[6]) );
      my $nume = $row[1] =~ /$user_email_address/
               ? 'bullet_out'
               : 'bullet_in';

      $list{$events_order}[5] = $row[8]==1
                              ? "<a href=\"webmail?".
                                          "action=readmessage&amp;".
                                          "message_id=".MkUrl($row[0])."&amp;".
                                          "owner=$row[6]\">$row[1]</a>"
                              : $row[1];

      $list{$events_order}[0]	= IG::UsrInf('name',$row[6]);
      $list{$events_order}[1]  	= "$row[3]<br>".substr($row[4],0,5);
      $list{$events_order}[2]  	= Img( src=>"$IG::img_url/${nume}.gif");
      $list{$events_order}[3]	= 'Email';
      $list{$events_order}[4]	= "$row[9] $row[5] - $IG::docs_type{$row[7]}";
     }
   }

  ## ORDERS
  if ($on{orders} &&  CheckPrivilege("orders_view"))
   {
    $user = $on{user} ne 'all' ? "and owner='$in{user}'" : '';

    DbQuery("select * from orders ".
	    "where contactid='$in{contactid}'".
	    " and issue>'$in{fromdate}' and issue<'$in{todate}' $user");

    while ( my @row = FetchRow() )
     {
      ++$counter;
      ($d1,$d2,$d3) = IG::GetValuesByDate($row[1]);
      $events_order = $d3.$d2.$d1.$counter;

      $list{$events_order}[0]	= IG::UsrInf('name',$row[5]);
      $list{$events_order}[1]  	= $row[1];
      $list{$events_order}[2]  	= Img( src=>"$IG::img_url/bullet_out.gif");
      $list{$events_order}[3]	= $lang{order};
      $list{$events_order}[4]	= "$lang{protocol_number} $row[0] $row[4]";
     }
   }

  ## OFFERS
  if ($on{offers} &&  CheckPrivilege("offers_view"))
   {
    $user = $on{user} ne 'all' ? "and owner='$in{user}'" : '';

    DbQuery("select * from offers ".
	    "where contactid='$in{contactid}'".
	    " and issue>'$in{fromdate}' and issue<'$in{todate}' $user");

    while ( my @row = FetchRow() )
     {
      ++$counter;
      ($d1,$d2,$d3) = IG::GetValuesByDate($row[1]);
      $events_order = $d3.$d2.$d1.$counter;

      $list{$events_order}[0] = IG::UsrInf('name',$row[4]);
      $list{$events_order}[1] = $row[1];
      $list{$events_order}[2] = Img(src=>"$IG::img_url/bullet_out.gif");
      $list{$events_order}[3] = "$lang{offer} $row[6]";
      $list{$events_order}[4] = "$lang{protocol_number} $row[0] - $row[10] $row[3] - $lang{due_date} $row[5]";
     }
   }

  ## LETTERS
  if ($on{letters} &&  CheckPrivilege("letters_view"))
   {
    $user = $on{user} ne 'all' ? "and owner='$in{user}'" : '';

    DbQuery("select * from letters ".
	    "where contactid='$in{contactid}'".
	    " and issue>'$in{fromdate}' and issue<'$in{todate}' $user");

    while ( my @row = FetchRow() )
       {
        ++$counter;
        ($d1,$d2,$d3) = IG::GetValuesByDate($row[1]);
        $events_order = $d3.$d2.$d1.$counter;

        $list{$events_order}[0]	= IG::UsrInf('name',$row[3]);
        $list{$events_order}[1] = $row[1];
        $list{$events_order}[2] = Img( src=>"$IG::img_url/bullet_out.gif");
        $list{$events_order}[3]	= $lang{letter};
        $list{$events_order}[4]	= "$lang{protocol_number} $row[0] $row[4]";
       }
   }

  ## ARCHIVE
  if ($on{archive} &&  CheckPrivilege("archive_view"))
   {
    if ($on{user} ne "all")
     { $user="and owner='$in{user}'"; }
    else
     { $user="";}

    DbQuery("select * from archive ".
	    "where contactid='$in{contactid}'".
	    " and issue>'$in{fromdate}' and issue<'$in{todate}' $user");

    while ( my @row = FetchRow() )
     {
        ++$counter;
        ($d1,$d2,$d3) = IG::GetValuesByDate($row[2]);
        $events_order = $d3.$d2.$d1.$counter;

        $list{$events_order}[0]	= IG::UsrInf('name',$row[6]);
        $list{$events_order}[1] = $row[2];
        $list{$events_order}[2] = Img( src=>"$IG::img_url/bullet_in.gif");
        $list{$events_order}[3]	= $lang{archive};
        $list{$events_order}[4]	= "$IG::docs_type{$row[7]} - $lang{due_date} $row[4] - $lang{protocol_number} $row[0] $row[5]";
     }
   }

  foreach (reverse sort keys %list)
   {
    TaskListItem(
	[$list{$_}[2],
	 '',
	 'align=center'],
	[$list{$_}[3],
	 '',
	 'nowrap'],
	[MkLink($list{$_}[4])." $list{$_}[5]"],
	[$list{$_}[0],
	 '',
	 'nowrap'],
	[$list{$_}[1]],
		);
   }

  TaskListFoot(16);
  PrOut "</td></tr></table>\n";
  TaskFoot();

  ## A Java script to check all checkbox in a click
  PrOut <<FINE;
  <script language="JavaScript">
   <!--
   function CheckAll()
   {
      for (var i=0;i<document.proto.elements.length;i++)
      {
         var e = document.proto.elements[i];
         if (e.name != "allbox")
            e.checked = document.proto.allbox.checked;
      }
   }
   //-->
  </script>
FINE
  HtmlFoot();
 }

###########################################################################
###########################################################################
sub protosub
 {
  DbQuery("select contactid, contactname, owner, sharemode, contacttype ".
          "from contacts ".
          "where contactid='".DbQuote($on{master})."'");
  my ($master_id, $master_name, $master_owner, $master_sharemode, $master_type)
     = FetchRow();

  die("What's append is this an Orphan contact?\n") if !$master_id;

  my $_write_mode =    (   !$on{contactid}
                        || $on{edit}
                        || IG::ConfigParam('contacts.direct_editing') )
                    && _can_edit_master( $master_id )
                  ? 1
                  : 0;

  if ( $on{edit} && !_can_edit_master( $master_id ) )
   {
    push @IG::errmsg, $lang{Err_no_rigth};
   }

  HtmlHead( shortcuts => _short_cuts(),
            title     => $on{contactid} 
		         ? "$on{contactid} - $on{contactname}"
                         : $lang{new_contact_card},
            align     => 'left' );

  if (!$on{contactid})
   {
    TaskHead( title => $lang{referring},
              width => 600 );
   }
  else
   {
    TaskHead( title    => "$lang{card} $on{contactid} - ".
                          IG::UsrInf( 'name', $master_owner ),
	      minwidth => 600);

    HLayer(
	   MkButton( text    => $lang{back_tomaster},
	             link    => "contacts?action=showrecord&amp;".
	                              "contactid=$on{master}" ),

           ( !$_write_mode
	     ?  MkButton( text => $lang{edit},
	                  link => "contacts?action=showrecord&amp;".
                                           "contactid=$on{contactid}&amp;".
					   "edit=1" )
	     : '' ),

           MkButton( text    => $lang{delete_contact},
                     onclick => IG::JsConfirm($lang{are_you_sure}),
                     link    => "contacts?action=delexec&amp;".
                                         "contactid=$on{contactid}" ),
	  );
   }

  FormHead (	cgiaction  => 'protoagg',
		status     => $_write_mode ? 'rw' : 'r',
		autofocus  => $on{contactid} ? 'false' : '',
		ckchanges  => 'true',
		labelstyle => 'width: 130px');

  Input (	type=>'hidden',
                name=>'alert_duplicate');

  Input (	type=>'hidden',
                name=>'alert_duplicate_email');
                
  Input (	type=>'hidden',
                name=>'master');

  Input (	type=>'hidden',
                name=>'contactid');

  Input (	type=>'hidden',
                name=>'owner',
                value=>$master_owner,
                override=>1);

  Input (	type=>'hidden',
                name=>'pricelistflag',
                value=>'n');

  Input (	type=>'hidden',
                name=>'sharemode',
                value=>'2');

  Input (	show=>$lang{contact_name},
		type=>'text',
		name=>'jobtitle',
		style=>'width:66px;',
		size=>8,
		maxlen=>8);

  Input (	type     => 'text',
		float    => 'left',	
		name     => 'contactname',
		validate => { mandatory => 'true',
		              onerror   => $lang{Err_contact_name} },
		style    => 'width:350px;',
		size     => 55, 
		maxlen   => 70 );

  Input (       type => 'label',
                show => $lang{linked_to},
                fieldstyle => "height:20px; width:400px;".
	                      "border:1px solid $IG::clr{border}; overflow:hidden;",
	        data => "<a href=\"contacts?".
	                      "action=showrecord&amp;".
                              "default_pane=4&amp;".
	                      "contactid=$master_id\">".
	                      "$master_id $master_name</a>", );

  Img( href  => "contacts?".
                "action=changemaster&amp;".
	        "subcontactid=$on{contactid}&amp;".
	        "currentmaster=$on{master}",
       src   => "$IG::img_url/contact_finder.gif",
       title => $lang{change_master_contact}
       ) if _can_edit_master( $on{master} );


  Input (	show=>$lang{office_tel},
		type=>'phonenumber',
		name=>'tel1',
		style=> 'width:112px',
		maxlen=>20);

  Input (	show=>$lang{home_tel},
		type=>'phonenumber',
		name=>'tel2',
		float=>'left',

		style=>'width:130px',
		maxlen=>20);

  Input (	show=>'Fax',
		type=>'faxnumber',
		name=>'fax',
		style=> CheckPrivilege('igfax_send')
		     ?  'width:112px'
		     :  'width:130px',
		maxlen=>20);

  Input (	show=>$lang{mobile_phone},
		type=>'mobilephone',
		float=>'left',
		name=>'tel3',
		style=>'width:130px',
		maxlen=>20);

  Input (	show=>$lang{confidence_level},
		type=>'basictable',
		zerovalue=>'true',
		style=>'width:130px',
		name=>'confidence');

  Input (	show     => $lang{birth_date},
		type     => 'date',
		float    => 'left',
		validate => { mandatory => 'false',
		              onerror   => $lang{Err_birth_date} },
		name     => 'birthdate');

  Input (	show=>"<a href=\"http://$on{url}\">http://</a>",
		type=>'text',
		name=>'url',
		style=>'width:130px',
		maxlen=>100);

  Input (	show=>$lang{portal_password},
		type=>'text',
		float=>'left',
		name=>'passwd',
		style=>'width:130px',
		maxlen=>10);

  Input (	show     => $lang{email},
		type     => 'email',
                validate => { onerror => $lang{Err_email_address} },
		name     => 'email',
		style    => 'width:235px',
		maxlen   => 100 );

  Img (		href=>"javascript:winPopUp('webmail?".
						"action=composemessage&amp;".
						"contactid=$on{master}&amp;".
						"onsend=close&amp;".
						($master_type == 8 
						 ? 'sharemode=2&amp;' 
						 : '').
						"to=".MkUrl("\"$on{contactname}\" <$on{email}>").
					   "',700,560,'compose')",
                align  => 'absmiddle',
                style  => 'float:left; margin-right:10px',
		src=>"$IG::img_url/email_go.png");

  Input (	show=>$lang{no_email},
		type=>'checkbox',
		float=>'left',
		name=>'outfromlist');

  Input (       type=>'text',
                show=>$lang{personal_document},
                style=>'width:130px',
                maxlen=>20,
                name=>'personal_doc' );

  Input (       show=>'Instant messaging',
                float=>'left',
                type=>'select',
                data=>['ICQ','Msn','Yahoo','Skype'],
                style=>'width:60px; font-size:10px;',
                name=>'instant_msgs_type' );

  Input (       type=>'text',
                float=>'left',
                style=>'width:75px',
                maxlen=>20,
                name=>'instant_msgs_value' );

  Input (	show=>$lang{operative_function},
		type=>'basictable',
		zerovalue=>'true',
		style=>'width:420px;',
		name=>'operativefunction',
		table=>'operative_functions');

  Input (	show=>$lang{description},
		type=>'textarea',
		name=>'note',
		labelstyle=>'width:130px; height:50px',
		style=>'width:420px; height:40px;' );

  Input (	show=>$lang{notes},
		type=>'textarea',
		name=>'note1',
		labelstyle=>'width:130px; height:50px',
		style=>'width:420px; height:40px;' );

  Input (	show=>$lang{address},
		type=>'text',
		style=>'width:420px;',
		name=>'address1',
		maxlen=>50);

  Input (	show=>$lang{city},
		type=>'text',
		name=>'city1',
		style=>'width:420px;',
		maxlen=>35);

  Input (	show=>$lang{country},
		type=>'select',
		name=>'country1',
		style=>'width:170px;',
		value=>$IG::soc_country,
		data=>\%IG::countries,
		zerovalue=>'true');

  Input (	show=>$lang{zip_code},
		float=>'left',
		labelstyle=>'width:55px',
		style=>'width:80px;',
		type=>'text',
		name=>'zip1',
		maxlen=>15);

  Input (	show=>$lang{province},
		type=>'text',
		float=>'left',
		name=>'prov1',
		style=>'width:30px;',
		labelstyle=>'width:55px',
		maxlen=>2);

  Input (	type=>'reset',
		style=>'margin-top: 10px',
		value=>$lang{restore});

  Input (	type=>'submit',
		float=>'left',
		style=>'margin-top: 10px',
		value=>$lang{save});

  FormFoot();
  TaskFoot();
  HtmlFoot();

  LogD( $on{contactname},
        'view',
        'contacts',
        $on{contactid} ) if $on{contactid};
 }

###########################################################################
###########################################################################
sub changemaster
 {
  HtmlHead( title => $lang{change_master_contact} );
  TaskHead( title => $lang{change_master_contact} );

  FormHead( name       => 'changemaster',
            labelstyle => 'width:150px',
	    cgiaction  => 'changemasteragg');

  Input(   type => 'hidden',
	   name => 'subcontactid');
     
  Input(   type => 'hidden',
	   name => 'currentmaster');

  DbQuery("select contactid,contactname from contacts ".
          "where contactid='".DbQuote($on{subcontactid})."'");

  my @row1 = FetchRow();
  Input( type       => 'label',
	 show       => $lang{contact_name},
	 fieldstyle => "height:20px; width:420px;".
	               "border:1px solid $IG::clr{border};",
	 data       => "<a href=\"contacts?".
	                         "action=showrecord&amp;".
                                 "default_pane=4&amp;".
	                         "contactid=$row1[0]\">$row1[0] $row1[1]</a>",
       );

  DbQuery("select contactid,contactname from contacts ".
          "where contactid='".DbQuote($on{currentmaster})."'");
  my @row2 = FetchRow();
  Input( type       => 'label',
	 show       => $lang{linked_to},
         fieldstyle => "height:20px; width:420px;".
	               "border:1px solid $IG::clr{border};",
         data       => "<a href=\"contacts?".
                                 "action=showrecord&amp;".
                                 "default_pane=4&amp;".
                                 "contactid=$row2[0]\">$row2[0] $row2[1]</a>",
       );

  Input( show  => $lang{new_master_contact},
         style => 'width:400px',
         type  => 'contactfinder');
     
  Input( type  => 'submit',
	 value => $lang{save} );
     
  FormFoot();
  TaskFoot();
  HtmlFoot();
 }

###########################################################################
###########################################################################
sub changemasteragg
 {
  IG::Redirect('contacts') && return if !$on{subcontactid};
  IG::Redirect("contacts?".
               "action=showrecord&amp;".
               "contactid=$on{subcontactid}") && return if !$on{contactid}
                                                        || !$on{currentmaster}
							|| !_can_edit_master( $on{currentmaster} );

  IG::Redirect("contacts?".
               "action=showrecord&amp;".
               "contactid=$on{subcontactid}") && return if !_can_edit_master( $on{currentmaster} );

  QuoteParams();
  DbQuery("update contacts set master='$in{contactid}' ".
          "where contactid='$in{subcontactid}' ".
          "      and master='$in{currentmaster}'" );

  IG::Redirect("contacts?action=showrecord&amp;contactid=$on{subcontactid}");
 }

###########################################################################
###########################################################################
sub configure
 {
  DbQuery("select contactname, owner, pricelistflag, vendorslistflag,".
	  " sharemode, contactvalue ".
	  "from contacts where contactid='".DbQuote($on{contactid})."'");

  (	$on{contactname},
	$on{owner}, 
	$on{pricelistflag}, 
	$on{vendorslistflag}, 
	$on{sharemode}, 
	$on{contactvalue} ) = FetchRow();

  ## fix unknown owner
  $on{owner} = $auth_user if !IG::UsrInf( 'name', $on{owner} );

  if ( $auth_user ne $on{owner} && ! CheckPrivilege('sys_user_admin') )
   {
    IG::Warn( $lang{Err_privileges} );
    return;
   }

  HtmlHead( title => $lang{configure} );
  TaskHead( title => $lang{configure}, width => 600 );
  HLayer(
	 MkButton( text    => $lang{delete_contact},
                   onclick => IG::JsConfirm($lang{are_you_sure}),
	           link    => "contacts?action=delexec&amp;".
	                               "contactid=$on{contactid}" ),
	                            
	 MkButton( text    => $lang{clone_contact},
	           link    => "contacts?action=clone&amp;".
	                               "contactid=$on{contactid}" ),
	);

  TaskMsg("$lang{contact}: $on{contactid} $on{contactname}",7);
  FormHead(	name=>'configure',
		cgiaction=>'configureagg');

  Input (	type=>'hidden',
		name=>'contactid');

  Input (	show=>$lang{contact_owner},
		name=>'owner',
		type=>'logins');

  Input (	show=>$lang{share_mode},
		type=>'select',
		name=>'sharemode',
		data=>[(['0',$lang{share0}],
			['1',$lang{share1}],
			['2',$lang{share2}])]);

  Input (	show=>$lang{class},
		order=>'byvalue',
		type=>'basictable',
		zerovalue=>'true',
		name=>'contactvalue');

  Input (	show=>$lang{products_mng},
		type=>'select',
		name=>'pricelistflag',
		data=>[(['n',$lang{no}],
			['s',$lang{yes}])]);

  Input (	show=>$lang{vendors_list},
		type=>'select',
		name=>'vendorslistflag',
		data=>[(['n',$lang{no}],
			['s',$lang{yes}])]);

  DbQuery("select groupid from contacts_group ".
	  "where contactid='".DbQuote($on{contactid})."'");
  my @row;
  $on{groups} .= "$row[0]\n" while @row = FetchRow();
  Input (	type => 'multiselect',
		name => 'groups',
		show => $lang{groups},
		data => "SELECT contactid, contactname ".
                        "FROM contacts where category='group' ".
                        "ORDER BY contactname");

  Input (	show=>$lang{update},
		type=>'submit');
  FormFoot();
  TaskFoot();
  HtmlFoot();
 }

###########################################################################
###########################################################################
sub configureagg
 {
  $on{contactvalue} ||= '0';
  DbQuery("select sharemode,owner from contacts ".
	  "where contactid='".DbQuote($on{contactid})."'");
  my @row = FetchRow();

  if ( ( $row[0]==0 || $row[0]==2) &&
       $auth_user ne $row[1] &&
       !CheckPrivilege('sys_user_admin')
     )
   { die("You cannot modify this parameters.\n") }

  QuoteParams();
  DbQuery("update contacts set contactvalue=$in{contactvalue},".
	  " sharemode=$in{sharemode}, owner='$in{owner}',".
	  " pricelistflag='$in{pricelistflag}',".
	  " vendorslistflag='$in{vendorslistflag}' ".
	  "where contactid='$in{contactid}'");

  DbQuery("delete from contacts_group where contactid='$in{contactid}'");
  for (split /\r\n/, $on{groups})
   {
    DbWrite( action => 'insert',
             table  => 'contacts_group',
             values => [ 'contact', $_, $on{contactid} ] );
   }

  IG::Redirect( "contacts?".
		"action=showrecord&amp;".
		"contactid=$on{contactid}" );
 }

##############################################################################
##############################################################################
sub _get_group_name
 {
  my $group_id = shift;
  my $cid = DbQuery( query => "select contactname from contacts ".
                              "where contactid='$group_id'",
                     type  => 'UNNESTED' );
  return FetchRow( $cid );
 }

##############################################################################
##############################################################################
sub show_groups
 {
  my %group_cnt;
  $on{order}         ||= 'contactname';
  $on{sortdirection} ||= 'asc';

  HtmlHead( shortcuts => _short_cuts(),
            title     => $lang{group_administration} );
  TaskHead( title     => $lang{group_administration},
            icon      => 0,
            width     => '100%' );

  HLayer( MkButton( text => $lang{new_group},
                    link => "contacts?action=protogroup&amp;backtoreferer=1"),
          MkButton( text => $lang{contact_management},
                    link => "contacts"),
        );

  TaskListMenu ([$lang{group_name},	'order=contactname'],
		[$lang{description},	'order=note'],
		[$lang{contacts},       ''],
                [$lang{last_change},    'order=lastupdate'],
		[]
	       );

  QuoteParams();
  ## First we want to know how many contact we have in each group
  DbQuery("select groupid, count(*) from contacts_group ".
          "where type='contact' group by groupid");
  while ( my ($_gid, $_count ) = FetchRow() )
   { $group_cnt{$_gid} = $_count; }

  DbQuery("select contactid, contactname, note, lastupdate ".
	  "from contacts where category='group' ".
          "order by $in{order} $in{sortdirection}");

  while ( my @row = FetchRow() )
   {
    my $_gname = MkUrl($row[1]);

    TaskListItem (
	[$row[1],
	 "contacts?action=participant&amp;".
	          "backtoreferer=1&amp;".
	          "groupid=$row[0]"],
	[$row[2],
	 ""],
	[$group_cnt{$row[0]}],
	[$row[3]],
        [ Img( src   => "$IG::img_url/group_green.gif",
               title => $lang{add_participant},
               href  => "contacts?action=protopart&amp;".
                                 "backtoreferer=1&amp;".
	                         "groupid=$row[0]" ).

          Img( src   => "$IG::img_url/edit.gif",
               title => $lang{edit},
               href  => "contacts?action=protogroup&amp;".
                                 "contactid=$row[0]" )
          ]
	         );
   }

  TaskListFoot();
  Footer();
 }

##############################################################################
##############################################################################
sub participant
 {
  my ($color, $counter);
  my $group_name = _get_group_name( $on{groupid} );

  HtmlHead( shortcuts => _short_cuts(),
            title     => $lang{participant_list} );

  TaskHead( width     => '100%',
	    minwidth  => 550,
	    title     => $lang{participant_list} );

  my $base_url = "contacts?".
                 "action=participant&amp;".
                 "groupid=$on{groupid}";

  my ( $limit,
       $offset,
       $page_selector ) = IG::MkTaskPaging
                           ( "select count(*) ".
                             "from contacts, contacts_group ".
                             "where contacts.contactid = contacts_group.contactid".
                             " and contacts_group.groupid='".DbQuote($on{groupid})."'",
                             $base_url );

  HLayer( left_layers => [(
           MkButton( text => $lang{add_participant},
	             link => "contacts?action=protopart&amp;".
	                              "backtoreferer=1&amp;".
	                              "groupid=$on{groupid}" ),

           MkButton( text => $lang{delete_group},
                     link => "contacts?action=delexec&amp;".
                                      "contactid=$on{groupid}" ),

           MkButton( text => $lang{edit},
                     link => "contacts?action=protogroup&amp;".
                                      "backtoreferer=1&amp;".
                                      "contactid=$on{groupid}" ),

           MkButton( text => $lang{back_to_list},
                     link => "contacts?action=show_groups" )
                         )],

          right_layers => [( $page_selector )]
 	 );
 
  TaskMsg(Img(src=>"$IG::img_url/group.gif",
	      align=>'absmiddle',
	      style=>'margin-right:3px').
	  "<strong>$lang{group}:</strong> $group_name",7);

  TaskListMenu (	[$lang{card}],
			[$lang{contact_name},
			 '',
			 'nowrap'],
			[$lang{telephone_exchange}],
			['Fax'],
			[$lang{email}],
			[""]);

  DbQuery("select contacts.contactname, contacts.contactid,".
	  " contacts.contacttype, contacts.tel1, contacts.fax, contacts.email ".
	  "from contacts, contacts_group ".
	  "where contacts.contactid = contacts_group.contactid".
	  " and contacts_group.groupid='".DbQuote($on{groupid})."' ".
	  "order by contacts.contactname ".
	  "limit $limit offset $offset" );

  while ( my @row = FetchRow() )
   {
    $color = ($row[2]==1 || $row[2]==6) ? '#b5b5b5' : 'black';
    ++$counter;
    TaskListItem
      (
	["$counter) $row[1]",
	 "contacts?action=showrecord&amp;backtoreferer=1&amp;contactid=$row[1]",
	 "nowrap"],
	[$row[0],
	 "",
	 "style=\"color: $color\""],
	[$row[3]],
	[$row[4]],
	[$row[5]],
	[Img( src   => "$IG::img_url/delete.gif",
              class => 'noprint',
              href  => "contacts?action=delpart&amp;".
                                "contactid=$row[1]&amp;".
                                "pos=$on{pos}&amp;".
                                "groupid=$on{groupid}" )
        ]
      );
   }

  TaskListFoot();
  TaskFoot();
  HtmlFoot();

  LogD( $group_name,
	'view',
	'contacts_group',
	$on{groupid} );
 }

##############################################################################
##############################################################################
sub delpart
 {
  QuoteParams();
  DbQuery("delete from contacts_group ".
	  "where type='contact'".
	  " and groupid='$in{groupid}' and contactid='$in{contactid}'");

  LogD( "deleted $on{contactid} from group $on{groupid}",
	"delete",
	"contacts_group",
	$on{contactid} );
  IG::Redirect( "contacts?".
		"action=participant&amp;".
		"pos=$on{pos}&amp;".
		"groupid=$on{groupid}" );
 }

##############################################################################
##############################################################################
sub protopart
 {
  HtmlHead( title => $lang{group_administration} );
  TaskHead( title => $lang{group_administration},
            icon  => 1 );
  TaskMsg("$lang{group}: " . _get_group_name( $on{groupid} ), 7 );

  FormHead( cgiaction => 'protopartagg' );
  
  Input( type    => 'hidden',
         name    => 'groupid');

  Input( type    => 'contactfinder',
         show    => $lang{contact_name});

  Input( type    => 'submit',
         style   => 'margin-top:20px',
         value   => $lang{add});

  Input( type    => 'button',
         style   => 'margin-top:20px',
         float   => 'left',
         onclick => "document.location = 'contacts?action=show_groups';",
         value   => $lang{cancel});

  FormFoot();
  TaskFoot();
  HtmlFoot();
  1;
 }

##############################################################################
##############################################################################
sub protopartagg
 {
  push @IG::errmsg, IG::ContactFinder('contact_name');
  protopart() && return if @IG::errmsg;

  DbWrite( overwrite_clause => "type='contact' and ".
                               "groupid='".DbQuote($on{groupid})."' and ".
                               "contactid='".DbQuote($on{contactid})."'",
           action           => 'insert',
           table            => 'contacts_group',
           values           => [ 'contact', $on{groupid}, $on{contactid} ]);

  LogD( "insert $on{contact} to group " . _get_group_name( $on{groupid} ),
	"insert",
	"contacts_group",
	$on{contactid});

  IG::BackToReferer();
 }

##############################################################################
##############################################################################
sub protogroup
 {
  HtmlHead( title => $lang{group_administration} );

  if ( !$on{contactid} )
   {
    TaskHead( title => "$lang{group_administration} - $lang{new_contact_card}");
   }
  else
   {
    TaskHead( title    => $lang{group_administration},
              minwidth => 400 );

    DbQuery("select contactname, owner, category, note ".
            "from contacts where contactid='$on{contactid}'");
    ( $on{contactname},
      $on{owner},
      $on{category},
      $on{note}        ) = FetchRow();
   }

  FormHead(	cgiaction => 'protoagg' );

  Input (	type      => 'hidden',
                name      => 'contactid' );

  Input (	type      => 'hidden',
                name      => 'owner');

  Input (	type      => 'hidden',
                name      => 'category',
                value     => 'group' );

  Input (	name      => 'contactname',
		type      => 'text',
		validate  => { mandatory => 'true' },
		style     => 'width:250px; margin-top:20px;',
		labelstyle=> 'margin-top:20px;',
		maxlen    => 70,
		show      => $lang{group_name} );

  Input (	name      => 'note',
		type      => 'textarea',
		style     => 'width:250px; height:100px;',
		show      => $lang{description});

  Input (	type      => 'submit',
		name      => 'salva',
		show      => $lang{save},
		value     => $lang{save});

  FormFoot();
  TaskFoot();
  HtmlFoot();
 }

###########################################################################
###########################################################################
sub findshow
 {
  HtmlHead();
  if ($auth_user ne 'guest' && CheckPrivilege('contacts_view'))
   {
    HLayer( bottom_space => 0,
            right_layers =>
             [(
               FormHead( name       => 'findnavi',
                         method     => 'get',
                         autofocus  => 'false',
                         target     => 'mainf',
                         cgiaction  => 'findexec',
                         labelstyle => 'border:0px; width:auto',
                         float      => 'left' ).

               Input( type  => 'findable' ),

               Input( type  => 'select',
                      name  => 'fieldtofind',
                      data  => [(['name',    $lang{contact_name}],
                                 ['tel',     "$lang{phone_number}/Fax"],
                                 ['address', "$lang{address}/$lang{city}"],
                                 ['email',   $lang{email}],
                                 ['number',  $lang{number}],
                                 ['note',    $lang{notes}])]),

               Input( type  => 'select',
                      name  => 'method',
                      value => 'contain',
                      data  => [(['start',   $lang{with_begin}],
                               ['contain', $lang{contain}])] ),

               Input( type  => 'text',
                      name  => 'keytofind',
                      value => $IG::cookie{lastsearch},
                      focus => 'true',
                      size  => 10,
                      style => 'width:100px; margin-right: -5px;',
                      onblur=> "document.cookie = 'lastsearch=' + escape(this.value);" ),

               Input( type  => 'image',
                      name  => $lang{find},
                      src   => "$IG::img_url/${IG::tema}search.gif",
                      alt   => $lang{find}),
                      
               FormFoot()
             )]
	);
   }

  HtmlFoot();
 }

###########################################################################
###########################################################################
sub findexec
 {
  my ($color, $counter);

  my $products_link = $on{linktoproducts}
		    ? "products?action=revisione&amp;contactid="
		    : "contacts?action=showrecord&amp;contactid=";

  my $query         = "(contacts.contacttype<>8 or".
                      " contacts.owner='$auth_user' or".
                      " contacts.contacttype is null) and ". 
                      "(masterCnt.contactid is null or".
                      " masterCnt.contacttype<>8 or".
                      " masterCnt.owner='$auth_user' or".
                      " masterCnt.contacttype is null) and ";

  ## Make a query
  QuoteParams();
  if (length($on{keytofind}) < 2)
   {
    $query = '1=0';
    push @IG::errmsg, $lang{Err_find};
   }
  elsif ($in{fieldtofind} eq 'name')
   {
    $in{keytofind} = lc $in{keytofind};
    my $nospace_key = $in{keytofind};
       $nospace_key =~ s/(\.|\-|\\\'| )//g;

    if ($in{method} eq 'start')
     {
      my $full_len  = length( $on{keytofind} );
      my $short_len = length( $nospace_key );
      $query .= "(substr(lower(contacts.nospace),1,$short_len)='$nospace_key' or".
                " substr(lower(contacts.contactname),1,$full_len)='$in{keytofind}') ";
     }
    else
     {
      $query .= "(contacts.nospace ~* '$nospace_key' or".
                " contacts.contactname ~* '$in{keytofind}') ";
     }
    $query .= " and contacts.pricelistflag='s'" if $in{linktoproducts}; 
   }
  elsif ($in{fieldtofind} eq 'tel')
   {
    $query .= "(contacts.fax ~* '$in{keytofind}' or".
              " contacts.tel1 ~* '$in{keytofind}' or".
              " contacts.tel2 ~* '$in{keytofind}' or".
              " contacts.tel3 ~* '$in{keytofind}' or".
              " contacts.tel4 ~* '$in{keytofind}' or".
              " contacts.tel5 ~* '$in{keytofind}') ";
   }
  elsif ($in{fieldtofind} eq 'note')
   {
    $query .= "contacts.note ~* '$in{keytofind}' ";
   }
  elsif ($in{fieldtofind} eq 'number')
   {
    $query .= "contacts.contactid ~* '$in{keytofind}' ";
   }
  elsif ($in{fieldtofind} eq 'email')
   {
    $query .= "contacts.email ~* '$in{keytofind}' ";
   }
  elsif ($in{fieldtofind} eq 'address')
   {
    $query .= "(contacts.address1 ~* '$in{keytofind}' or".
              " contacts.address3 ~* '$in{keytofind}' or".
              " contacts.address2 ~* '$in{keytofind}' or".
              " contacts.city1 ~* '$in{keytofind}' or".
              " contacts.city3 ~* '$in{keytofind}' or".
              " contacts.city2 ~* '$in{keytofind}') ";
   }

  DbQuery( "select COUNT(*) ".
           "FROM contacts ".
           "LEFT JOIN contacts masterCnt ".
           "ON masterCnt.contactid=contacts.master ".
           "WHERE $query" );
  ($counter) = FetchRow();

  if ($counter == 1)
   {
    ## In this case open directly the contact
    DbQuery("SELECT contacts.contactid, contacts.contacttype ".
	    "FROM contacts ".
            "LEFT JOIN contacts masterCnt ".
            "ON masterCnt.contactid=contacts.master ".
	    "WHERE $query");
    my @row = FetchRow();
    if ($row[1] != 1 && $row[1] != 6)
     {
      IG::Redirect( "$products_link$row[0]" );
      return;
     }
   }


  Header();
  TaskListMenu (
		[$lang{code}],
		[$lang{contact_name}],
		[$lang{operations_headquarters}],
		[$lang{operating_center}],
		[]
	       );

  DbQuery("select contacts.contactname, contacts.contactid, contacts.city1,".
          " contacts.address1, contacts.city2, contacts.address2,".
          " contacts.contacttype, contacts.master, contacts.category,".
          " contacts.email, contacts.tel1, contacts.fax, ".
          " masterCnt.contactname, contacts.tel3, masterCnt.contacttype, ".
          " contacts.jobtitle ".
	  "FROM contacts ".
          "LEFT JOIN contacts masterCnt ".
          "ON masterCnt.contactid=contacts.master ".
          "WHERE $query order by contacts.contactname, contacts.contactid");

  while (my @row = FetchRow())
   {
    my $icons = _action_icons( contactid => $row[1],
	                       masterid  => $row[7],
                               email     => $row[9],
			       private   => $row[6] == 8 || $row[14] == 8,
                               phone     => $row[10],
                               sms       => $row[7] ? $row[13] : '',
                               fax       => $row[11] );

    $color = ($row[6]==1 || $row[6]==6) ? '#b5b5b5' : 'black';

    if ( $row[7] )
     {
      ## it's a subcontact
      TaskListItem
       (
	[Img( src   => "$IG::img_url/".
		       ( $row[7]
		         ? 'user.gif'
		         : $row[8] eq 'group' 
		           ? 'group.gif'
		           : 'contact.gif'),
	      align => 'absmiddle',
	      style => 'margin-right:3px').
	 $row[1],
	 "$products_link$row[1]",
	 'nowrap'],
	[$row[0] . ( $row[15] ? "<span style=\"font-size:10px;\"> ($row[15])</span>" : ''),
	 "",
	 "style=\"color: $color\""],
	["$row[12]",
	 "",
	 "style=\"color: $color\" colspan=2"],
	[$icons,
	 "",
	 "nowrap style=\"color: $color\""],
       );
     }
    else ## master contact
     {
      TaskListItem
       (
	[Img( src   =>"$IG::img_url/".
		      ( $row[7] ? 'user.gif'
			: $row[8] eq 'group' 
			? 'group.gif' : 'contact.gif'),
	      align =>'absmiddle',
	      style =>'margin-right:3px').
	 $row[1],
	 "$products_link$row[1]",
	 'nowrap'],
	[$row[0],
	 "",
	 "style=\"color: $color; font-weight: bold\""],
	["$row[3]&nbsp;$row[2]",
	 "",
	 "style=\"color: $color\""],
	["$row[5]&nbsp;$row[4]",
	 "",
	 "style=\"color: $color\""],
	[$icons,
	 "",
	 "nowrap style=\"color: $color\""],
       );
     }
   }
  TaskListFoot();

  push @IG::errmsg, $lang{no_items} if length($on{keytofind}) > 1 && !$counter;

  Footer();
 }

################################################################################
################################################################################
sub _find_report_cols
 {
  my %cols;
  require IG::DBStructure;

  for (qw(address city province zip_code country))
   {
    $lang{"operations_headquarters_$_"} = "$lang{operations_headquarters} $lang{$_}";
    $lang{"operating_center_$_"} = "$lang{operating_center} $lang{$_}";
    $lang{"legal_situs_$_"} = "$lang{legal_situs} $lang{$_}";
   }

  for my $cnt (0..$IG::DBStructure::db_tables_index{contacts}[0])
   {
    my $langkey  = $IG::DBStructure::db_tables{contacts}[$cnt]{label};
    my $fieldkey = $IG::DBStructure::db_tables{contacts}[$cnt]{name};
    my $tablename= $IG::DBStructure::db_tables{contacts}[$cnt]{table};
    next if !$langkey;
    $cols{fields}{$fieldkey} = $lang{$langkey} || ucfirst($langkey);
    $cols{tables}{$fieldkey} = $tablename if $tablename;
   }
 
  return %cols;
 }

###############################################################################
###############################################################################
sub listreport
 {
  my $orderby  = DbQuote( $on{order} )         || 'name';
  my $orderdir = DbQuote( $on{sortdirection} ) || 'asc';

  HtmlHead( shortcuts => _short_cuts() );
  TaskHead( title     => $lang{contacts_report},
	    width     => '100%',
	    minwidth  => 650 );

  HLayer( left_layers =>
           [( MkButton
               ( text      => $lang{new_report},
	         link      => "contacts?action=mkreport" ),
            )]
        );

  my $base_link = "table=$on{table}";

  TaskListMenu
   (
    [$lang{last_change},	"order=lastchange&amp;$base_link",'width=80'],
    [$lang{name},		"order=name&amp;$base_link"],
    ['','','width=60']
   );

  DbQuery( "SELECT * from reports ".
           "where owner='$auth_user' and type='contacts' ".
           "order by $orderby $orderdir" );

  while ( my @row = FetchRow() )
   {
    TaskListItem
     (
	[ $row[9] || $IG::tv{today},
	  "reports?action=loadreport&amp;subact=execute&amp;id=$row[0]"],
	[ $row[2] ],
	[ Img( src   => "$IG::img_url/report_edit.png",
	       width => 16,
               title => $lang{edit},
               href  => "reports?action=loadreport&amp;id=$row[0]" ).
          Img( src   => "$IG::img_url/report_delete.png",
	       width => 16,
               title => $lang{delete},
               href  => "reports?action=deletereport&amp;".
                                "id=$row[0]&amp;".
                                "backtoreferer=1" ).
          Img( src   => "$IG::img_url/report_go.png",
	       width => 16,
               title => $lang{make_report},
               href  => "reports?action=loadreport&amp;".
                                "subact=execute&amp;id=$row[0]" )
        ]
     );
   }

  TaskListFoot();
  TaskFoot();
  HtmlFoot();
 }

################################################################################
################################################################################
sub mkreport
 {
  my $page_title = $lang{contacts_report} .
                   ( $on{reportname} ? ": $on{reportname}" : '');

  ## check report name
  if ($on{columns2query} && !$on{reportname})
   {
    push @IG::errmsg, $lang{Err_report_name};
    $lang{report_name} = Blush($lang{report_name});
   }

  ## check wrong actions
  if (   !$on{columns2query}
      && ($on{make_report} || $on{savereport} || $on{make_preview}) )
   {
    push @IG::errmsg, $lang{add_fields_to_filter};
    $lang{criteria} = Blush($lang{criteria});
   }    

  ## Show report results
  viewreport() && return if $on{make_report} && !@IG::errmsg;

  my ( $query, $columns);
  my %cols = _find_report_cols();
  my %fields = %{$cols{fields}};

  if    ($on{undo} && $on{columns2query})
   { $on{columns2query}--   }
  elsif ($on{addfield})
   { $on{columns2query}++   }
  elsif ($on{addresults})
   { $on{columns2extract}++ }
  elsif ($on{delresults})
   { $on{columns2extract}-- }
  elsif ($on{delall})
   {
    $on{columns2query}=0;
    DbQuery("delete from reports ".
	    "where id='".DbQuery($on{id})."'".
	    " and owner='$auth_user'") if $on{id};
   }

  $on{columns2query}   ||= 0;
  $on{columns2extract} ||= 3;
  $on{id}	       ||= MkId(15);

  ## build the query
  if ( $on{columns2query} )
   {
    $on{logic} ||= 'and';

    for (1 .. $on{columns2query})
     {
      my $operator    = $on{"m$_"} || '=';
      my $field_value = lc( $on{$on{"f$_"}.$_} );
      my $field_name  = 'contacts.' . $on{"f$_"};

      if (   $field_value
          || $field_name eq 'contacts.contacttype'
          || $operator eq '<>'
         )
       {
        ## ok we can add field to query
        if ( $field_name =~ /(employees
                             |contactsource
                             |billing
                             |contactvalue
                             |economicsector
                             |contacttype
                             |economiczone
                             )$
                            /x
           )
         {
	  ## it's a basictable field
   	  $field_value ||= '0';
          $operator = '=' if $operator eq '~*';
         }
        elsif ( $operator eq '=' )
         {
          $field_name  = "lower($field_name)";
         }

        $query .= "$field_name $operator '$field_value' $on{logic} ";
       }
     }
    $query =~ s/(.+)(and|or) $/\($1\) and contacts.master\=\'0\'/;

    ## limits query to a specified group
    $query = "contacts_group.groupid = $on{group_filter}".
	     " and ($query)" if $on{group_filter};
   }

  ## build columns list
  if ( $on{columns2extract} )
   { $columns .= $on{"r$_"}.':' for 1..$on{columns2extract}; }

  ## Check number of records filtered by the report
  $query ||= '1=0';
  DbQuery( "select count(*) from contacts ".
	   ( $on{group_filter}
	     ? "left join contacts_group ".
	       "on contacts_group.contactid = contacts.contactid "
	     : "" ).
	   "where $query" );
  my $records_nmb = FetchRow() || '0';

  ## Save report if requested
  if ($on{savereport} && $query ne '1=0' && $on{reportname})
   {
    my $fake_qs = $IG::query_string;
       $fake_qs =~ s/savereport/dontsavereport/g;

    DbWrite( table            => 'reports',
             action           => 'insert',
             overwrite_clause => "id='".DbQuote($on{id})."'",
             values           => [ $on{id},
                                   $auth_user,
                                   $on{reportname},
                                   $query,
                                   $columns,
                                   $fake_qs,
                                   'contacts',
                                   $on{orderby},
                                   $on{orderdirection},
                                   $IG::tv{today} ],
           );

    LogD($on{reportname}, 'view', 'reports', $on{id});
    viewreport();
    return;
   }

  ## Query Edit Form
  HtmlHead( shortcuts => _short_cuts(),
            title     => $page_title );
  TaskHead( title     => $page_title,
	    width     => '100%',
	    minwidth  => 650 );

  FormHead(	method=>'get',
		labelstyle=>'width: 300px',
		cgiaction=>'mkreport',
		name=>'mkreport');

  Input (	type=>'hidden',
		name=>'id'); 

  Input (	type=>'hidden',
		override=>1,
		name=>'query',
		value=>$query);

  Input (	type=>'hidden',
		name=>'columns2query',
		override=>1,
		value=>$on{columns2query} );

  Input (	name=>'columns2extract',
		override=>1,
		value=>$on{columns2extract},
		type=>'hidden');

  ## set default field
  my $html =	Input (	name=>'reportname',
			labelstyle=>'width:150px',
			type=>'text',
			style=>'width:400px',
			maxlen=>90,
			show=>$lang{report_name} ).

		Input (	name=>'f'.($on{columns2query}+1),
			value=>'owner',
			show=>$lang{wanted_field},
			labelstyle=>'width: 150px',
			data=>\%fields,
			type=>'select').

		Input (	show=>$lang{add},
			type=>'submit',
			float=>'left',
			name=>'addfield').

		Input (	show=>$lang{delete_last},
			type=>'submit',
			float=>'left',
			name=>'undo');

  TaskMsg( $html, 7 );

  Input (	type=>'label',
		labelstyle => 	'margin-top:10px;'.
				'width:auto;'.
				'border:0px;'.
				'background-color:transparent;'.
				'font-weight:bold',
		show=>$lang{search_logic});

  Input (	name=>'logic',
		show=>$lang{search_logic_action},
		type=>'select',
		data=>{'and' => $lang{criteria_and},
		       'or'  => $lang{criteria_or} });

  Input (	name=>'group_filter',
		show=>$lang{limit_to_group},
		type=>'select',
                zerovalue=>'true',
                data=>'SELECT contactid, contactname '.
		      "FROM contacts where category='group' ".
		      "ORDER BY contactname" );

  Input (	type=>'label',
		labelstyle => 	'margin-top:10px;'.
				'width:auto;'.
				'border:0px;'.
				'background-color:transparent;'.
				'font-weight:bold',
		show=>$lang{search_criteria} );


  ## show search fields selected
  if ( !$on{columns2query} )
   {
    Input (	type=>'label',
		show=>$lang{criteria},
		data=>Blush($lang{add_fields_to_filter}),
		float=>'none');
   }
  else
   {
    for ( 1 .. $on{columns2query} )
     {
      my $field_name = $on{"f$_"};

      Input (	name=> "f$_",
		type=> 'hidden');

      my $field_type = $field_name =~ /	 contactsource
					|billing
					|contactvalue
					|economicsector
					|economiczone	/x
		     ? 'basictable'
		     : 'text';

      Input ( name=>"m$_",
	      show=>$fields{$field_name},
	      value=>'=',
	      style=>'width:100px',
	      type=>'select',
	      data=> {	"="  =>		$lang{equal_to},
			"<>" =>		$lang{different_from},
			"~*" =>		$lang{contain},
			">"  =>		$lang{greater},
			"<"  =>		$lang{inferior} });

      if ($field_name eq 'contacttype')
       {
	Input (	name=>$field_name.$_,
		type=>'select',
		float=>'left',
		style=>'width:250px',
		data=> [(	[0, $lang{type0}],
				[1, $lang{type1}],
				[2, $lang{type2}],
				[3, $lang{type3}],
				[4, $lang{type4}],
				[5, $lang{type5}],
				[6, $lang{type6}],
				[7, $lang{type7}],
				[8, $lang{type8}],
				[9, $lang{type9}],
				[10, $lang{type10}],
			)]);
       }
      elsif  ($field_name eq 'owner')
       {
  	Input (	name=>$field_name.$_,
		float=>'left',
		style=>'width:250px',
		type=>'logins');
       }
      elsif  ($field_name eq 'lastupdate')
       {
	Input (	name=>$field_name.$_,
		float=>'left',
		type=>'date');
       }
      else
       {
        Input (	name=>$field_name.$_,
		zerovalue=>'true',
		type=>$field_type,
		float=>'left',
		table=>$cols{tables}{$field_name},
		style=>'width:250px');
       }
     }
   }


  ## Preview results
  Input (	type=>'label',
		labelstyle => 	'margin-top:10px;'.
				'width:auto;'.
				'border:0px;'.
				'background-color:transparent;'.
				'font-weight:bold',
		show=>$lang{preview});

  Input (	type=>'label',
		show=>$lang{results_preview},
		data=>$records_nmb);

  Input (	show=>$lang{recalculate},
		float=>'left',
		type=>'submit',
		name=>'make_preview');

  $on{r1} ||= 'contactname';
  $on{r2} ||= 'owner';
  $on{r3} ||= 'city1';
  $on{r4} ||= 'contacttype';
 
  Input (	type=>'label',
		labelstyle => 	'margin-top:10px;'.
				'width:auto;'.
				'border:0px;'.
				'background-color:transparent;'.
				'font-weight:bold',
		show=>$lang{columns_to_export} );

  Input (	name=>'addresults',
		type=>'submit',
		style=>'height:15px;margin-left:7px;margin-top:5px;font-size:10px',
		show=>$lang{add_column} );

  Input (	name=>'delresults',
		float=>'left',
		type=>'submit',
		style=>'height:15px;margin-top:5px;font-size:10px',
		show=>$lang{delete_column} );

  for (1..$on{columns2extract})
   {
    Input(	name=>'orderby',
		type=>'radio',
		value=>$on{"r$_"} );

    Input (	name=>"r$_",
	        show=>$_,
		float=>'left',
		type=>'select',
		data=>\%fields );
   }

  Br(3);
  TaskMsg(	Input (	show=>$lang{make_report},
			name=>'make_report',
			type=>'submit').

                Input( type   => 'submit',
                       name   => 'savereport',
                       float  => 'left',
                       show   => $lang{save_report} ).

                Input( type   => 'button',
                       name   => 'newreport',
                       float  => 'right',
                       onclick=> "document.location = 'contacts?action=mkreport';",
                       show   => $lang{new_report}).
			
                Input( type   => 'button',
                       name   => 'cancel',
                       float  => 'right',
                       onclick=> "document.location = 'contacts?action=listreport'",
                       show   => $lang{cancel} )
		,7);
  FormFoot();
  TaskFoot();
  HtmlFoot();
 }
 
################################################################################
################################################################################
sub viewreport
 {
  ## Show results filtered by query
  my ( @list_menu, @list_item );
  my %cols = _find_report_cols();
  my %fields = %{$cols{fields}};

  HtmlHead(     title=>$on{reportname} );
  TaskHead(	title=>$on{reportname},
	   	width=>'100%');

  FormHead(	cgiaction=>'mkreport');

  Input (	type=>'hidden',
		name=>'id');

  Input (	type=>'submit',
		name=>'delall',
		style => 'font-size:10px',
		show=>$lang{new_report});

  FormFoot();

  FormHead(	name=>'usereport',
		cgiaction=>'usereport');

  Input (	type=>'hidden',
		name=>'id');

  Input (	type=>'hidden',
		name=>'query');

  Input (	type=>'hidden',
		name=>'group_filter');

  Input (	type=>'submit',
		float=>'left',
		name=>'mkgroup',
		style => 'font-size:10px',
		show=>$lang{mkgroup_by_report});

  Input (	type=>'submit',
		float=>'left',
		name=>'addcontacts2group',
		style => 'font-size:10px',
		show=>$lang{add_contacts_to_group} );

  ##XXX2DEVELOPE - Make Campaign by report feature 
  #Input (	type=>'submit',
  #		float=>'left',
  #		name=>'mkcampaign',
  #		style => 'font-size:10px',
  #		show=>$lang{mkcampaign_by_report});

  Br();

  ## show results
  my $fields = "contacts.contactid";

  ## make table header and query fields
  $list_menu[0][0] = $lang{number};
  for (1..$on{columns2extract})
   {
    $fields .= ", contacts." . $on{"r$_"};
    $list_menu[$_][0] = $fields{$on{"r$_"}};
   }
  TaskListMenu (@list_menu);

  DbQuery( "select $fields from contacts ".
           ( $on{group_filter}
	     ? "left join contacts_group ".
	       "on contacts_group.contactid = contacts.contactid "
             : '' ).
	   "where $on{query} ".
	   "order by contacts.$on{orderby}" );

  while ( my @row = FetchRow() )
   {
    $list_item[0][0] = $row[0];
    $list_item[0][1] = "contacts?action=showrecord&amp;contactid=$row[0]";

    for (1..$on{columns2extract})
     {
      ## popolate fields
      if ($on{"r$_"} eq "owner")
       { $row[$_] = IG::UsrInf('name',$row[$_]); }
      elsif ($on{"r$_"}=~ /contactsource|billing|contactvalue|economicsector|economiczone/)
       { $row[$_] = GetTableVal($cols{tables}{$on{"r$_"}}, $row[$_]); }
      if ($on{"r$_"} eq "contacttype")
       { $row[$_] = $lang{"type".$row[$_]}; }

      $list_item[$_][0] = $row[$_];
     }
    TaskListItem ( @list_item );
   }

  TaskListFoot();
  FormFoot();
  TaskFoot();
  HtmlFoot();
  1;
 }

################################################################################
################################################################################
sub _mk_new_id
 {
  my $conn = DbQuery( query => $IG::db_driver eq 'sqlite'
		            ?  "SELECT MAX(contactid) FROM contacts"
		            :  "SELECT MAX(lpad(contactid,10,'0')) ".
		               "FROM contacts",
                      type  => 'UNNESTED' );

  my $new_id = FetchRow( $conn );
  $new_id = 1000 if $new_id < 1000;
  $new_id +=1; ## increase id && delete 00000
  return $new_id;
 }

################################################################################
################################################################################
sub usereport
 {
  my ($nospace, $counter);

  HtmlHead( title   => $lang{contacts_report} );
  TaskHead( title   => $lang{contacts_report},
            padding => 15 );

  if ( $on{mkgroup} )
   {
    ## show a "new group" form
    FormHead( cgiaction => 'usereport',
              float     => 'left');

    Input(    type      => 'hidden',
              name      => 'query');

    Input(    type      => 'text',
              show      => $lang{group_name},
              size      => 20,
              name      => 'groupname');

    Input(    type      => 'submit',
              show      => $lang{new_group},
              name      => 'mkgroupagg' );
    FormFoot();
   }
  elsif ( $on{mkgroupagg} )
   {
    ## make a new group
    DbQuery("select count(*) from contacts ".
	    "where category='group'".
	    " and contactname ~* '".DbQuote($on{groupname})."'");
    my $count = FetchRow();

    ## set a new group name
    $count ||= '';
    $on{contactid} = _mk_new_id();
    $on{groupname} = uc($on{groupname});
    $nospace = "$on{groupname}$count";
    $nospace =~ s/\-|\'| |\.//g;

    DbWrite( action => 'insert',
             table  => 'contacts',
             values => { contactname => "$on{groupname}$count",
                         nospace     => $nospace,
                         contactid   => $on{contactid},
                         category    => 'group',
                         owner       => $auth_user
                       } );

    my $conn = DbQuery("select contacts.contactid from contacts ".
		       ( $on{group_filter}
			 ? "left join contacts_group ".
			   "on contacts_group.contactid = contacts.contactid "
			 : "" ).
		       "where $on{query}");
    while ( my @row = FetchRow($conn) )
     {
      $counter++;
      DbWrite( action => 'insert',
               table  => 'contacts_group',
               values => ['contact', $on{contactid}, $row[0] ] );
     }
    TaskMsg("$counter $lang{group}: $on{groupname}$count - $lang{mkgroup_ok}");
   }
  elsif ( $on{addcontacts2group} )
   {
    ## Show an "add to group" form
    FormHead( cgiaction => 'usereport',
              float     => 'left');

    Input(    type      => 'hidden',
              name      => 'query');

    Input(    name      => 'groupid',
              show      => $lang{group_name},
              type      => 'select',
              data      => 'SELECT contactid, contactname '.
                           "FROM contacts where category='group' ".
                           "ORDER BY contactname" );

    Input(    type      => 'submit',
              show      => $lang{add},
              name      => 'addcontacts2groupagg' );
    FormFoot();
   }
  elsif ( $on{addcontacts2groupagg} )
   {
    ## Add contacts to a group
    my $conn = DbQuery("select contacts.contactid from contacts ".
		       ( $on{group_filter}
			 ? "left join contacts_group ".
			   "on contacts_group.contactid = contacts.contactid "
			 : "" ).
		       "where $on{query}");

    while ( my @row = FetchRow($conn) )
     {
      $counter++;
      DbWrite( action => 'insert',
               table  => 'contacts_group',
               values => ['contact', $on{groupid}, $row[0] ] );
     }

    TaskMsg( $lang{add_contacts_to_group_ok} );
   }

  TaskFoot();
  HtmlFoot();
 }

################################################################################
################################################################################
sub Header 
 {
  $IG::set_cookie{lastsearch} = $on{keytofind};
  HtmlHead( shortcuts=>_short_cuts(),
            title=>"$lang{find} - $lang{contacts}" );
  TaskHead( title=>"$lang{find} - $lang{contacts}",
	    width=>'100%',
	    minwidth=>650);
  HLayer(
	 MkButton( text => $lang{new_contact_card},
	           link => "contacts?action=proto" ),
	           
         MkButton( text => $lang{new_group},
                   link => "contacts?action=protogroup"),

         MkButton( text => $lang{import_contacts},
                   link => "contacts?action=import_contacts",
                   privilege => CheckPrivilege('contacts_import') ),

         MkButton( text => $lang{search_on_internet},
                   privilege => $IG::lang eq 'it',
                   link => "http://www.paginegialle.it/pgol/4-".MkUrl($on{keytofind}),
                   quick_help => "Search on Internet Yellow Page" )
	);

  TaskMsg("$lang{contacts} - $lang{find}: <strong>$on{keytofind}</strong>",4);
 }

sub Footer
 {
  TaskFoot();
  HtmlFoot();
 }

###########################################################
## We want to keep some translated words
## $lang{fiscal_information}
## $lang{group_participant}
