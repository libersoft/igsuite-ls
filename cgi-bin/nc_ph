#! /usr/bin/perl
# Procedure: nc_ph
# Last update: 25/05/2009
#############################################################################
# IGSuite 4.0.0 - Provides an Office Suite by  simple web interface         #
# Copyright (C) 2002 Dante Ortolani  [LucaS]                                #
#                                                                           #
# This program is free software; you can redistribute it and/or             #
# modify it under the terms of the GNU General Public License               #
# as published by the Free Software Foundation; either version 2            #
# of the License, or (at your option) any later version.                    #
#                                                                           #
# This program is distributed in the hope that it will be useful,           #
# but WITHOUT ANY WARRANTY; without even the implied warranty of            #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
# GNU General Public License for more details.                              #
#                                                                           #
# You should have received a copy of the GNU General Public License         #
# along with this program; if not, write to the Free Software Foundation,   #
# Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.           #
#############################################################################

use strict;
use IG;
IG::MkEnv(__PACKAGE__);

IG::DTable (
		submit_nc						=> sub { CheckPrivilege('nc_ph_new') },
    submit_nc_execute   => sub { CheckPrivilege('nc_ph_new') },
		confirm_nc					=> sub { CheckPrivilege('nc_ph_confirm') },
		validate_nc					=> sub { CheckPrivilege('nc_ph_validate') },
    delete_nc           => sub { CheckPrivilege('nc_ph_validate') },
		fix_nc							=> sub { CheckPrivilege('nc_ph_new') },
		edit_nc_form				=> sub { CheckPrivilege('nc_ph_confirm') },
		edit_nc_save				=> sub { CheckPrivilege('nc_ph_confirm') },
    archived_nc_list    => sub { CheckPrivilege('nc_ph_new') },
		delshow							=> sub { CheckPrivilege('documentation_edit') },
		delexec							=> sub { CheckPrivilege('documentation_edit') },
		findshow						=> sub { CheckPrivilege('documentation_view') },
		findexec						=> sub { CheckPrivilege('documentation_view') },
		default_action			=> sub { CheckPrivilege('nc_ph_new') });
		

############################################################################
############################################################################
sub submit_nc
 {
 
  HtmlHead( title => "Segnala nuova NC" );
  TaskHead( title => "Segnala nuova NC",
      minwidth  => 500 );
  
	$on{user} ||= $auth_user;
  ( $on{calendarday},
    $on{calendarmonth},
    $on{calendaryear}   ) = IG::GetValuesByDate( $on{eventdate} || $tv{today} )
                              if !$on{calendarday};

  FormHead(	cgiaction=>'submit_nc_execute',
		enctype=>"multipart/form-data");

  Input (	show=>'Id',
		type=>'text',
		name=>'id',
		value=>_mk_new_id(),
		size=>10,
		maxlen=>10);

  Input (	show=>"Autore",
		type=>'text',
		name=>'submitter',
	    	value=>$auth_user,
		size=>30,
		maxlen=>30);

       Input( type       => 'date',
              float      => 'left',
              name       => 'submitter_date',
              labelstyle => 'margin-left:10px; width:auto',
              show       => $lang{date},
              value      => IG::GetDateByFormat( $on{calendarday},
                                                 $on{calendarmonth},
                                                 $on{calendaryear}) );

  Input(    type      => 'logins',
    show      => "All'attenzione di",
    name      => 'confirmer_to',
    value     => $on{confirmer_to}
  );

  Input (	show=>"Oggetto NC",
		type=>'textarea',
    style=> 'width:300px; height:120px; clear:both',
		name=>'desc_oggetto',
		size=>50,
		maxlen=>60);
		
  Input (	show=>"Descrizione NC",
		type=>'textarea',
    style=> 'width:300px; height:120px; clear:both',
		name=>'desc_nc',
		size=>50,
		maxlen=>60);
		
  Input (	show=>"Trattamento proposto",
		type=>'textarea',
    style=> 'width:300px; height:120px; clear:both',
		name=>'desc_trattamento',
		size=>50,
		maxlen=>60);

  

  Input (	type=>'submit',
		value=>$lang{save});

  FormFoot();
  TaskFoot();
  HtmlFoot();
  1;
 
 }

sub submit_nc_execute {
  QuoteParams();
  DbQuery(query =>[( "INSERT INTO nc_ph ( id, status, desc_oggetto, desc_nc, desc_trattamento, submitter_name, submitter_date, confirmer_to)".
                     "VALUES ('$in{id}', 'S1', '$in{desc_oggetto}',".
                     " '$in{desc_nc}', '$in{desc_trattamento}',".
                     "'$in{submitter}', '$in{submitter_date}', '$in{confirmer_to}' )"
			)]
);
  IG::SendIsms (  receiver  => "$in{confirmer_to}", body    => "Nuova NC da confermare." );
  default_action();
}
 
 
############################################################################
# Lista NC aperte
############################################################################
sub default_action
 {
  my ($prece, $linea, $counter);

  if (CheckPrivilege('nc_ph_validate')) {
  DbQuery("SELECT id, desc_oggetto,submitter_date,status FROM nc_ph ".
	  "where status<>'S5' ".
	  "ORDER BY status DESC");
  } elsif (CheckPrivilege('nc_ph_confirm')) {
  DbQuery("SELECT id, desc_oggetto,submitter_date,status,assigned_to, confirmer_to FROM nc_ph ".
    "where status<>'S5' AND confirmer_to='".$auth_user."'".
    "ORDER BY status DESC");
  } elsif (CheckPrivilege('nc_ph_new')) {
  DbQuery("SELECT id, desc_oggetto,submitter_date,status,assigned_to, cofirmer_to FROM nc_ph ".
    "where status='S3' AND assigned_to='".$auth_user."'".
    "ORDER BY status DESC");
  }

  Header("NC Aperte");

  TaskListMenu (
	["ID"],
	["Oggetto"],
	[$lang{date}],
  ["Status"],
		 );

  while (my @row = FetchRow())
  {
    ++$counter;
    my $row = $row[0];
       $row =~ s/\d//g;
    $linea  = $prece ne $row && $counter ne 0 ? '<hr>' : '';
    $prece  = $row;

    my $status;

    if ($row[3] =~ /S1/) {$status='In attesa di conferma';}
    if ($row[3] =~ /S2/) {$status='In attesa di validazione';}
    if ($row[3] =~ /S3/) {$status='In attesa di risoluzione';}
    if ($row[3] =~ /S4/) {$status='In attesa di chiusura';}
    if ($row[3] =~ /S5/) {$status='Chiusa';}

    my $color = 'trasparent';
    if ($row[5] =~ $auth_user && $row[3] =~ /S1/) { $color='#FF0000'; }
    if ($row[4] =~ $auth_user && $row[3] =~ /S3/) { $color='#FF0000'; }

    TaskListItem (
	["$linea  $row[0]","nc_ph?action=edit_nc_form&amp;id=$row[0]","align=center style='background-color:$color;'"],
	["$linea $row[1]","","align=center"],
	["$linea $row[2]","","align=center"],
	["$linea $status","","align=center"],
		 );
  }

  TaskListFoot();
  Footer();
 }
############################################################################
# Archivio NC chiuse
############################################################################
sub archived_nc_list
 {
  my ($prece, $linea, $counter);

  DbQuery("SELECT id, desc_oggetto,submitter_date FROM nc_ph ".
	  "where status='S5' ".
	  "ORDER BY id DESC");

  Header("NC Archiviate");

  TaskListMenu (
	["ID"],
	["Oggetto"],
	[$lang{date}],
		 );

  while (my @row = FetchRow())
   {
    ++$counter;
    my $row = $row[0];
       $row =~ s/\d//g;
    $linea  = $prece ne $row && $counter ne 0 ? '<hr>' : '';
    $prece  = $row;

    TaskListItem (
	["$linea  $row[0]","nc_ph?action=edit_nc_form&amp;id=$row[0]"],
	["$linea $row[1]","","align=center"],
	["$linea $row[2]","","align=center"],
		 );
   }

  TaskListFoot();
  Footer();
 }
############################################################################
# Capo reparto - Visualizza NC segnalate e le approva
############################################################################
sub confirm_nc
{
## TODO check privilege
  $on{user} ||= $auth_user;
  ( $on{calendarday},$on{calendarmonth},$on{calendaryear}) = IG::GetValuesByDate( $on{eventdate} || $tv{today} ); 
	my $date = IG::GetDateByFormat( $on{calendarday},$on{calendarmonth},$on{calendaryear});

  QuoteParams();
  DbQuery("update nc_ph set status = 'S2', confirmer_name='$auth_user', confirmer_date='$date' ".
          "where id='$in{id}' and status = 'S1'");

  DbQuery("select validation_to from nc_ph where id='$in{id}'");
  ( $on{validation_to} ) = FetchRow();
  IG::SendIsms (  receiver  => "$on{validation_to}", body    => "Nuova NC da validare." );
  default_action();
}
#############################################################################
# Supervisore - Vede NC confermate dai capireparto e le valida
#############################################################################
sub validate_nc
{

## TODO check privilege

	if ($_[0] != undef) { $in{id} = $_[0] ; }
	if ($_[1] != undef) { $in{status} = $_[1]; }
  $on{user} ||= $auth_user;
  ( $on{calendarday},$on{calendarmonth},$on{calendaryear}) = IG::GetValuesByDate( $on{eventdate} || $tv{today} );
  my $date = IG::GetDateByFormat( $on{calendarday},$on{calendarmonth},$on{calendaryear});

  QuoteParams();
  if ($in{status} eq 'S2'){
  DbQuery("update nc_ph set status = 'S3' , verifier1_name='$auth_user', verifier1_date='$date'".
          "where id='$in{id}' and status = 'S2'");
  
  DbQuery("select assigned_to from nc_ph where id='$in{id}'");
  ( $on{assigned_to} ) = FetchRow();
  IG::SendIsms (  receiver  => "$on{assigned_to}", body    => "Nuova NC a te assegnata." );
	}
  else {
  DbQuery("update nc_ph set status = 'S5' , verifier2_name='$auth_user', verifier2_date='$date'".
          "where id='$in{id}' and status = 'S4'");
	}

	default_action();
}

############################################################################
# Tecnico - Ripara e chiude le NC
############################################################################
sub fix_nc
{
## TODO check privilege

  $on{user} ||= $auth_user;
  ( $on{calendarday},$on{calendarmonth},$on{calendaryear}) = IG::GetValuesByDate( $on{eventdate} || $tv{today} );
  my $date = IG::GetDateByFormat( $on{calendarday},$on{calendarmonth},$on{calendaryear});

  QuoteParams();
  DbQuery("update nc_ph set status = 'S4', fixxer_name='$auth_user', fixxer_date='$date' ".
          "where id='$in{id}' and status = 'S3'");
  
  DbQuery("select validation_to from nc_ph where id='$in{id}'");
  ( $on{validation_to} ) = FetchRow();
  IG::SendIsms (  receiver  => "$on{validation_to}", body    => "Nuova NC risolta da validare." );
  default_action();
}
###############################################################################
# Form dove vedere o modificare i dati della NC
###############################################################################
sub edit_nc_form
{

  QuoteParams();
  DbQuery("select * from nc_ph ".
    "where id='$in{id}'");

  ( $on{id},
	$on{status},
  $on{desc_oggetto},
  $on{desc_nc},
  $on{desc_trattamento},
	$on{due_date},
  $on{submitter_name},
  $on{submitter_date},
  $on{confirmer_name},
  $on{confirmer_date},
  $on{verifier1_name},
  $on{verifier1_date},
  $on{fixer_name},
  $on{fixer_date},
  $on{verifier2_name},
  $on{verifier2_date},
  $on{assigned_to},
  $on{confirmer_to},
  $on{note},
  $on{validation_to},
  $on{closing_state},
  ) = FetchRow();

	HtmlHead( title => "NC" );
  TaskHead( title => "NC",
      minwidth  => 500 );

	my $link_action_button = 'null';
    if ($on{status} =~ /S1/ && CheckPrivilege("nc_ph_confirm") ) { $link_action_button = "nc_ph?action=confirm_nc&amp;id=$on{id}&amp;status=$on{status}"; }
    if ($on{status} =~ /S2/ && CheckPrivilege("nc_ph_validate") ) {
      if (length($on{assigned_to}) !~ /0/) {
        $link_action_button = "nc_ph?action=validate_nc&amp;id=$on{id}&amp;status=$on{status}&amp;assigned_to=$on{assigned_to}";
      }
    }
    if ($on{status} =~ /S3/ && CheckPrivilege("nc_ph_new") ) { $link_action_button = "nc_ph?action=fix_nc&amp;id=$on{id}&amp;status=$on{status}"; }
    if ($on{status} =~ /S4/ && CheckPrivilege("nc_ph_validate") ) { $link_action_button = "nc_ph?action=validate_nc&amp;id=$on{id}&amp;status=$on{status}"; }

	if ($on{status} !~ /S5/ && ($link_action_button !~ /null/)) {
	#if ($on{status} !~ /S5/ ) {
 		HLayer(
	 		MkButton( text => "Firma e avanza di stato",
              	link => $link_action_button,
              	privilege => CheckPrivilege("nc_ph_new") )
  	);
	}
  

FormHead(	cgiaction=>'edit_nc_save',
		enctype=>"multipart/form-data");

  Input (	show=>'Id',
		type=>'text',
		name=>'id',
		value=>$on{id},
		size=>10,
		maxlen=>10);

  Input (	show=>"Autore",
		type=>'text',
		name=>'submitter',
	    	value=>$on{submitter_name},
		size=>30,
		maxlen=>30);

       Input( type       => 'date',
              float      => 'left',
              name       => 'submitter_date',
			        readonly   => 'true',
              labelstyle => 'margin-left:10px; width:auto',
              show       => $lang{date},
              value      => $on{submitter_date} );

  Input(    type      => 'logins',
    show      => "All'attenzione di",
    name      => 'confirmer_to',
    value     => $on{confirmer_to}
  );

if ($on{status} =~ /S1/ && CheckPrivilege("nc_ph_confirm") ) {
  Input(    type      => 'logins',
    show      => "Validazione richiesta a:",
    name      => 'validation_to',
    value     => $on{validation_to}
  );
}

  Input (	show=>"Requisiti",
		type=>'textarea',
    style=> 'width:300px; height:120px; clear:both',
		name=>'desc_oggetto',
		size=>50,
		value=>$on{desc_oggetto},
		maxlen=>60);
		
  Input (	show=>"Descrizione",
		type=>'textarea',
    style=> 'width:300px; height:120px; clear:both',
		name=>'desc_nc',
		size=>50,
		value=>$on{desc_nc},
		maxlen=>60);
		
  Input (	show=>"Trattamento proposto",
		type=>'textarea',
    style=> 'width:300px; height:120px; clear:both',
		name=>'desc_trattamento',
		size=>50,
		value=>$on{desc_trattamento},
		);

	if ($on{confirmer_name}) {
  Input ( show=>"Confermato da",
    type=>'text',
    name=>'confirmer_name',
    readonly   => 'true',
    value=>$on{confirmer_name},
    size=>30,
    maxlen=>30);

       Input( type       => 'date',
              float      => 'left',
              name       => 'confirmer_date',
              readonly   => 'true',
              labelstyle => 'margin-left:10px; width:auto',
              show       => $lang{date},
              value      => $on{confirmer_date} );

      Input(    type      => 'logins',
      show      => "Assegnato a",
      name      => 'assigned_to',
      value     => $on{assigned_to}
      );

       Input( type       => 'date',
              float      => 'left',
              name       => 'due_date',
              readonly   => 'false',
              labelstyle => 'margin-left:10px; width:auto',
              show       => "Scadenza",
              value      => $on{due_date} );
	}

	if ( $on{verifier1_name}) {
  Input ( show=>"Verifica Apertura da",
    type=>'text',
    name=>'verifier1_name',
    value=>$on{verifier1_name},
    readonly   => 'true',
    size=>30,
    maxlen=>30);

       Input( type       => 'date',
              float      => 'left',
              name       => 'verifier1_date',
              readonly   => 'true',
              labelstyle => 'margin-left:10px; width:auto',
              show       => $lang{date},
              value      => $on{verifier1_date} );

   Input ( show=>"Note",
    type=>'textarea',
    style=> 'width:300px; height:120px; clear:both',
    name=>'note',
    size=>255,
    value=>$on{note},
    );
	}

	if ($on{fixer_name}) {
  Input ( show=>"Risoluzione da",
    type=>'text',
    name=>'fixxer_name',
    value=>$on{fixer_name},
    readonly   => 'true',
    size=>30,
    maxlen=>30);

       Input( type       => 'date',
              float      => 'left',
              name       => 'fixxer_date',
              readonly   => 'true',
              labelstyle => 'margin-left:10px; width:auto',
              show       => $lang{date},
              value      => $on{fixer_date} );

  Input ( show=>"Stato chiusura",
    type=>'select',
    name=>'closing_state',
    value=>$on{closing_state},
    data=> {
            'nonconforme' => 'Rimasto non conforme',
            'conforme' => 'Tornato conforme',
            'eliminato' => 'Stato eliminato',
           },  
    style=>'width: 160px',
  );
	}

	if ($on{verifier2_name}) {
  Input ( show=>"Verifica Chiusura da",
    type=>'text',
    name=>'verifier2_name',
    value=>$on{verifier2_name},
    readonly   => 'true',
    size=>30,
    maxlen=>30);

       Input( type       => 'date',
              float      => 'left',
              name       => 'verifier2_date',
              readonly   => 'true',
              labelstyle => 'margin-left:10px; width:auto',
              show       => $lang{date},
              value      => $on{verifier2_date} );
	}

if (  ($on{status} =~ /S1/ && CheckPrivilege("nc_ph_confirm")) ||
      ($on{status} =~ /S3/ && CheckPrivilege("nc_ph_new")) ||
      CheckPrivilege("nc_ph_validate")    )
{ 
  Input (	type=>'submit',
		value=>$lang{save});
}

  FormFoot();
  TaskFoot();
  HtmlFoot();
  1;

}

sub edit_nc_save
{

	QuoteParams();
  DbQuery("UPDATE nc_ph SET desc_oggetto='$on{desc_oggetto}', desc_nc='$on{desc_nc}',desc_trattamento='$on{desc_trattamento}', ".
         "assigned_to='$on{assigned_to}', due_date='$on{due_date}', confirmer_to='$on{confirmer_to}', note='$on{note}', ".
         "confirmer_to='$on{confirmer_to}', validation_to='$on{validation_to}', closing_state='$on{closing_state}' ".
          "WHERE id='$in{id}'");
	edit_nc_form();
}
###############################################################################
###############################################################################
sub delete_nc
{

	QuoteParams();
  DbQuery("DELETE FROM nc_ph WHERE id='$in{id}'");
	default_action();
}
###############################################################################
###############################################################################
sub findshow
 {
  HtmlHead();
  if ($auth_user ne 'guest')
   {
    HLayer
     ( bottom_space => 0,
       right_layers
        =>[(
	    FormHead (	name	   => 'findnavi',
			method	   => 'get',
			autofocus  => 'false',
                        labelstyle => 'border:0px; width:auto;',
			target	   => 'mainf',
			cgiaction  => 'findexec',
			float	   => 'left' ),

	    Input (	type       => 'findable' ),

	    Input (	type       => 'select',
			name       => 'method',
			data       => [(
				        			['id',    $lang{with_protocol}],
							        ['description', $lang{with_description}],
							        ['quality_system', $lang{with_quality_system}],
						        )]
						 ),

	    Input (	type       => 'text',
			name       => 'keytofind',
                        focus      => 'true',
			value      => $IG::cookie{lastsearch},
                        style      => 'width:100px; margin-right: -5px;',
	        	onblur     => "document.cookie='lastsearch=' + escape(this.value)"),

	    Input (	type       => 'image',
			name       => $lang{find},
			src        => "$IG::img_url/${IG::tema}search.gif",
			alt        => $lang{find}),
			
	    FormFoot()
	  )]
	 );
   }
  HtmlFoot();
 }

############################################################################
############################################################################
sub findexec
 {
  my $query;
  $IG::set_cookie{lastsearch} = $on{keytofind};

  Header();

  TaskMsg("$lang{documentation_protocol} - ".
          "$lang{find}: <strong>$on{keytofind}</strong>",4);

  ## Build Query
  QuoteParams();
  if ( length($on{keytofind}) < 2 )
   {
    push @IG::errmsg, $lang{Err_find};
    $query = '1=0';
   }
  elsif ($on{method} eq 'id' || $on{keytofind} =~ /4\d\d\d\d\d\.\d\d/)
   { $query = "documentation.id ~* '$in{keytofind}'"; }
  elsif ($on{method} eq 'description')
   { $query = "documentation.description ~* '$in{keytofind}'"; }
  elsif ($on{method} eq 'quality_system')
   { $query = "documentation.quality_system ~* '$in{keytofind}'"; }
 

  my $counter = 0;
  TaskListMenu
   (
    [$lang{code}],
    [$lang{issue}],
    [$lang{revision}],
    [$lang{description}],
    [$lang{function}],
    [$lang{pages}],
    [$lang{date}],
    [$lang{quality_system}],
   );

  DbQuery( "SELECT id, issueid, revisionid, description, function, pages, issue, quality_system ".
           "FROM documentation ".
           "WHERE publishstatus='S' and approvalstatus ='A' and $query ".
           "ORDER BY issueid desc, id desc" );

  while ( my @row = FetchRow() )
   {
    ++$counter;
    TaskListItem( [ _idToLink("$row[0]_$row[1]_$row[2]") ],
                  [ $row[1] ],
                  [ $row[2] ],
                  [$row[3],"documentation?action=protomodi&amp;id=$row[0]&amp;issueid=$row[1]&amp;revisionid=$row[2]"],
                  [ $row[4] ], 
                  [ $row[5] ],
                  [ $row[6] ],
                  [ $row[7] ],
                  );
   }
  push @IG::errmsg, $lang{no_items} if !$counter && length($on{keytofind}) > 1;

  TaskListFoot();
  Footer();
 }
 
###########################################################################
###########################################################################
sub _idToLink
 {
  my $protocol = shift;
  my $file_name;

  chdir ("$IG::htdocs_dir/$IG::default_lang{documentation}/");
  my ($id) = (<$protocol.*>);

  $protocol =~ s/^([^_]+).+/$1/;

  if ( $id && CheckPrivilege('documentation_view') )
   {
    my $href = IG::GetHref('documentation', $id);

    return "<a href=\"$href\" target=\"".
	   ( $href =~ /\.html*$/i
		   ? "_blank"
		   : "mainf" ).
	   "\">$protocol<\/a>";
   }
  else
   { return $protocol }
 }

#############################################################################
#############################################################################
sub Footer
 {
  TaskFoot();
  HtmlFoot();
 }


sub Header 
 {

  my($title) = @_;

  HtmlHead();
  TaskHead( title => $title, minwidth  => 500 );
  HLayer(
    MkButton( text => "NC Aperte",
              link => "nc_ph?action=default_action",
              privilege => CheckPrivilege("nc_ph_new") ),

	  MkButton( text => "Segnala",
	            link => "nc_ph?action=submit_nc",
	            privilege => CheckPrivilege("nc_ph_new") ),
	            
    MkButton( text => "Archivio",
              link => "nc_ph?action=archived_nc_list",
                    privilege => CheckPrivilege("nc_ph_new") ),
	);

 }

################################################################################
################################################################################
sub _mk_new_id
 {
  my $conn = DbQuery( query => $IG::db_driver eq 'sqlite'
                            ?  "SELECT MAX(id) FROM nc_ph"
                            :  "SELECT MAX(lpad(id,10,'0')) ".
                               "FROM nc_ph",
                      type  => 'UNNESTED' );

  my $new_id = FetchRow( $conn );
  $new_id = 0 if $new_id < 1;
  $new_id +=1; ## increase id && delete 00000
  return $new_id;
 }
